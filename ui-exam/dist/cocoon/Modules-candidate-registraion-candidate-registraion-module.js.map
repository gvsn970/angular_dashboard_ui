{"version":3,"sources":["webpack:///./src/app/Components/candidate-registration/candidate-registration.component.html","webpack:///./src/app/Components/candidate-walkin-otp/candidate-walkin-otp.component.html","webpack:///./src/app/Components/candidate-registration/candidate-registration.component.css","webpack:///./src/app/Components/candidate-registration/candidate-registration.component.ts","webpack:///./src/app/Components/candidate-walkin-otp/candidate-walkin-otp.component.css","webpack:///./src/app/Components/candidate-walkin-otp/candidate-walkin-otp.component.ts","webpack:///./src/app/Modules/candidate-registraion/candidate-registraion-routing.module.ts","webpack:///./src/app/Modules/candidate-registraion/candidate-registraion.module.ts"],"names":[],"mappings":"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","file":"Modules-candidate-registraion-candidate-registraion-module.js","sourcesContent":["module.exports = \"<block-ui>\\n\\n</block-ui>\\n<section class=\\\"tenant_reg_sec\\\">\\n    <div class=\\\"tenant_reg_gradient\\\">\\n        <div class=\\\"p-4\\\">\\n            <img src=\\\"./../../../assets/images/316X120.png\\\" width=\\\"144px\\\" height=\\\"50px\\\" style=\\\"margin:0.28rem;padding-top:2px ;padding-bottom:2px ;\\\"\\n            />\\n        </div>\\n        <div class=\\\"text-center mt-4 mb-5 test_tile\\\" *ngIf=\\\"testTiltle\\\">\\n            <h2>Welcome to {{testTiltle}} Test</h2>\\n            <hr>\\n        </div>\\n        <div class=\\\"candid_forms_sec pl-5 pr-5\\\">\\n            <div class=\\\"pl-5 pr-5\\\">\\n                <mat-horizontal-stepper [linear]=\\\"isLinear\\\" #stepper class=\\\"p-5\\\">\\n                    <mat-step [stepControl]=\\\"firstFormGroup\\\">\\n                        <div class=\\\"p-4 reg_title text-center\\\">\\n                            <h5>\\n                                <b style=\\\"border-bottom: 2px solid #5ccd71;\\\">Personal Details</b>\\n                            </h5>\\n                        </div>\\n                        <form [formGroup]=\\\"firstFormGroup\\\" #formDir=\\\"ngForm\\\" class=\\\"row\\\">\\n                            <!-- <ng-template matStepLabel>Fill out your name</ng-template> -->\\n                            <div class=\\\"col-sm-6\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label for=\\\"candidateFirstName\\\">First Name</label>\\n                                    <input type=\\\"text\\\" placeholder=\\\"John\\\" [(ngModel)]=\\\"candidForm?.candidateDetails.candidatePersonalDetails.candidateFirstName\\\"\\n                                        class=\\\"form-control\\\" id=\\\"candidateFirstName\\\" formControlName=\\\"candidateFirstName\\\" [ngClass]=\\\"{'form-control':true,'red_border': firstFormGroup.controls['candidateFirstName'].touched && firstFormGroup.controls['candidateFirstName'].errors,'disabledClass':testTypeId == 1}\\\">\\n                                    <span *ngIf=\\\"(firstFormGroup.controls['candidateFirstName'].touched && firstFormGroup.controls['candidateFirstName'].errors && firstFormGroup.controls['candidateFirstName'].errors.required) || (submittedFirst && firstFormGroup.controls['candidateFirstName'].errors)\\\"\\n                                        class=\\\"errorTxt\\\">Please Enter First Name</span>\\n                                    <!-- <span *ngIf=\\\"firstFormGroup.touched && firstFormGroup.controls['candidateFirstName'].errors\\\" class=\\\"errorTxt\\\">Please Enter First Name</span> -->\\n                                    <p class=\\\"m-0\\\">\\n                                        <span class=\\\"errorTxt\\\" *ngIf=\\\"firstFormGroup.controls.candidateFirstName.errors && firstFormGroup.controls.candidateFirstName.errors.minlength\\\">Must have atleast 3 characters</span>\\n                                    </p>\\n                                    <p class=\\\"m-0\\\">\\n                                        <span class=\\\"errorTxt\\\" *ngIf=\\\"firstFormGroup.controls.candidateFirstName.errors && firstFormGroup.controls.candidateFirstName.errors.pattern\\\">\\n                                            Numbers Not Allowed\\n                                        </span>\\n                                    </p>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-sm-6\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label for=\\\"candidateLastName\\\">Last Name</label>\\n                                    <input type=\\\"text\\\" placeholder=\\\"Doe\\\" [(ngModel)]=\\\"candidForm?.candidateDetails.candidatePersonalDetails.candidateLastName\\\"\\n                                        class=\\\"form-control\\\" id=\\\"candidateLastName\\\" formControlName=\\\"candidateLastName\\\" [ngClass]=\\\"{'form-control':true,'red_border': firstFormGroup.controls['candidateLastName'].touched && firstFormGroup.controls['candidateLastName'].errors,'disabledClass':testTypeId == 1}\\\">\\n                                    <span *ngIf=\\\"(firstFormGroup.controls['candidateLastName'].touched && firstFormGroup.controls['candidateLastName'].errors && firstFormGroup.controls['candidateLastName'].errors.required) || (submittedFirst && firstFormGroup.controls['candidateLastName'].errors)\\\"\\n                                        class=\\\"errorTxt\\\">Please Enter Last Name</span>\\n                                    <!-- <span *ngIf=\\\"firstFormGroup.touched && firstFormGroup.controls['candidateLastName'].errors\\\" class=\\\"errorTxt\\\">Please Enter Last Name</span> -->\\n                                    <p class=\\\"m-0\\\">\\n                                        <span class=\\\"errorTxt\\\" *ngIf=\\\"firstFormGroup.controls.candidateLastName.errors && firstFormGroup.controls.candidateLastName.errors.pattern\\\">\\n                                            Numbers Not Allowed\\n                                        </span>\\n                                    </p>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-sm-6\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label for=\\\"candidateMail\\\">Email ID</label>\\n                                    <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"john.doe@gmail.com\\\" [(ngModel)]=\\\"candidForm?.candidateDetails.candidatePersonalDetails.candidateMail\\\"\\n                                        id=\\\"candidateMail\\\" formControlName=\\\"candidateMail\\\" [ngClass]=\\\"{'form-control':true,'red_border': firstFormGroup.controls['candidateMail'].touched && firstFormGroup.controls['candidateMail'].errors,'disabledClass':testTypeId == 1}\\\">\\n                                    <!-- <span *ngIf=\\\"firstFormGroup.touched && firstFormGroup.controls['candidateMail'].errors\\\" class=\\\"errorTxt\\\">Please Enter Valid Email Id</span> -->\\n                                    <span class=\\\"errorTxt\\\" *ngIf=\\\"checkMail() || (submittedFirst && firstFormGroup.controls['candidateMail'].errors)\\\">Please Enter Valid Email Id</span>\\n                                    <span *ngIf=\\\"firstFormGroup.controls['candidateMail'].touched && firstFormGroup.controls['candidateMail'].errors && firstFormGroup.controls['candidateMail'].errors.required\\\"\\n                                        class=\\\"errorTxt\\\">Please Enter Email ID</span>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-sm-6\\\">\\n                                <div class=\\\"form-group\\\" id=\\\"dob\\\">\\n                                    <label class=\\\"d-block\\\" for=\\\"dob\\\">Date of Birth</label>\\n                                    <!-- <mat-form-field>\\n                                        <input placeholder=\\\"MM/DD/YYYY\\\" matInput [matDatepicker]=\\\"dobPicker\\\" [(ngModel)]=\\\"candidForm?.candidateDetails.candidatePersonalDetails.candidateDateOfBirth\\\"\\n                                            id=\\\"dob\\\" formControlName=\\\"candidateDateOfBirth\\\" [ngClass]=\\\"{'form-control':true,'red_border': firstFormGroup.controls['candidateDateOfBirth'].touched && firstFormGroup.controls['candidateDateOfBirth'].errors}\\\">\\n                                        <mat-datepicker-toggle matSuffix [for]=\\\"dobPicker\\\"></mat-datepicker-toggle>\\n                                        <mat-datepicker #dobPicker></mat-datepicker>\\n                                    </mat-form-field> -->\\n                                    <div *ngIf=\\\"startDOB\\\">\\n                                        <input placeholder=\\\"MM/DD/YYYY\\\" class=\\\"form-control \\\" [(ngModel)]=\\\"candidForm['candidateDetails'].candidatePersonalDetails.candidateDateOfBirth\\\"\\n                                            id=\\\"dob\\\" formControlName=\\\"candidateDateOfBirth\\\" disabled>\\n                                    </div>\\n                                    <div *ngIf=\\\"!startDOB\\\">\\n                                        <mat-form-field >\\n                                            <input placeholder=\\\"MM/DD/YYYY\\\"  [max]=\\\"todayDate\\\" matInput [matDatepicker]=\\\"dobPicker\\\" id=\\\"dob\\\" formControlName=\\\"candidateDateOfBirth\\\" [ngClass]=\\\"{'form-control':true,'red_border': firstFormGroup.controls['candidateDateOfBirth'].touched && firstFormGroup.controls['candidateDateOfBirth'].errors}\\\">\\n                                            <mat-datepicker-toggle matSuffix [for]=\\\"dobPicker\\\"></mat-datepicker-toggle>\\n                                            <mat-datepicker  #dobPicker></mat-datepicker>\\n                                        </mat-form-field>\\n                                    </div>\\n                                    <span *ngIf=\\\"(firstFormGroup.controls['candidateDateOfBirth'].touched && firstFormGroup.controls['candidateDateOfBirth'].errors && firstFormGroup.controls['candidateDateOfBirth'].errors.required) || (submittedFirst && firstFormGroup.controls['candidateDateOfBirth'].errors)\\\"\\n                                        class=\\\"errorTxt\\\">Please Enter DOB</span>\\n                                    <!-- <span *ngIf=\\\"firstFormGroup.touched && firstFormGroup.controls['candidateDateOfBirth'].errors\\\" class=\\\"errorTxt\\\">Please Enter DOB</span> -->\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-sm-6\\\">\\n                                <div class=\\\"row\\\">\\n                                    <div class=\\\"col-sm-6\\\">\\n                                        <div class=\\\"form-group\\\">\\n                                            <label for=\\\"candidateGender\\\">Gender</label>\\n                                            <select class=\\\"form-control\\\" id=\\\"candidateGender\\\" formControlName=\\\"candidateGender\\\" [ngClass]=\\\"{'form-control':true,'red_border': firstFormGroup.controls['candidateGender'].touched && firstFormGroup.controls['candidateGender'].errors}\\\">\\n                                                <option [value]=\\\"\\\" [selected]=\\\"true\\\" disabled>Select Gender</option>\\n                                                <option [value]=\\\"'Male'\\\" [selected]=\\\"'Male' == candidForm?.candidateDetails.candidatePersonalDetails.candidateGender\\\">Male</option>\\n                                                <option [value]=\\\"'Female'\\\" [selected]=\\\"'Female' == candidForm?.candidateDetails.candidatePersonalDetails.candidateGender\\\">Female</option>\\n                                            </select>\\n                                            <span *ngIf=\\\"(firstFormGroup.controls['candidateGender'].touched && firstFormGroup.controls['candidateGender'].errors && firstFormGroup.controls['candidateGender'].errors.required) || (submittedFirst && firstFormGroup.controls['candidateGender'].errors)\\\"\\n                                                class=\\\"errorTxt\\\">Please Select Gender</span>\\n                                            <!-- <span *ngIf=\\\"firstFormGroup.touched && firstFormGroup.controls['candidateGender'].errors\\\" class=\\\"errorTxt\\\">Please Select Gender</span> -->\\n                                        </div>\\n                                    </div>\\n                                    <div class=\\\"col-sm-6\\\">\\n                                        <div class=\\\"form-group\\\">\\n                                            <label for=\\\"maritalStatus\\\">Marital Status</label>\\n                                            <select class=\\\"form-control\\\" id=\\\"maritalStatus\\\" [(ngModel)]=\\\"candidForm?.candidateDetails.candidatePersonalDetails.maritalStatus\\\"\\n                                                formControlName=\\\"maritalStatus\\\" [ngClass]=\\\"{'form-control':true,'red_border': firstFormGroup.controls['maritalStatus'].touched && firstFormGroup.controls['maritalStatus'].errors}\\\">\\n                                                <option [selected]=\\\"true\\\" disabled>Select</option>\\n                                                <option [value]=\\\"'married'\\\" [selected]=\\\"'married' == candidForm?.candidateDetails.candidatePersonalDetails.maritalStatus\\\">Married</option>\\n                                                <option [value]=\\\"'unmarried'\\\" [selected]=\\\"'unmarried' == candidForm?.candidateDetails.candidatePersonalDetails.maritalStatus\\\">Unmarried</option>\\n                                            </select>\\n                                            <span *ngIf=\\\"(firstFormGroup.controls['maritalStatus'].touched && firstFormGroup.controls['maritalStatus'].errors && firstFormGroup.controls['maritalStatus'].errors.required) || (submittedFirst && firstFormGroup.controls['maritalStatus'].errors)\\\"\\n                                                class=\\\"errorTxt\\\">Please Select Marital Status</span>\\n                                            <!-- <span *ngIf=\\\"firstFormGroup.touched && firstFormGroup.controls['maritalStatus'].errors\\\" class=\\\"errorTxt\\\">Please Select Marital Status</span> -->\\n                                        </div>\\n\\n                                    </div>\\n                                </div>\\n\\n                            </div>\\n                            <div class=\\\"col-sm-6\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label for=\\\"candidateMobile\\\">Phone Number</label>\\n                                    <input placeholder=\\\"9898989898\\\" type=\\\"number\\\" [(ngModel)]=\\\"candidForm?.candidateDetails.candidatePersonalDetails.candidateMobile\\\"\\n                                        class=\\\"form-control\\\" id=\\\"candidateMobile\\\" formControlName=\\\"candidateMobile\\\" [ngClass]=\\\"{'form-control':true,'red_border': firstFormGroup.controls['candidateMobile'].touched && firstFormGroup.controls['candidateMobile'].errors,'disabledClass':testTypeId == 1}\\\">\\n                                    <span class=\\\"errorTxt\\\" *ngIf=\\\"checkMobile()\\\">Please Enter Valid Mobile Number</span>\\n                                    <span *ngIf=\\\"(firstFormGroup.controls['candidateMobile'].touched && firstFormGroup.controls['candidateMobile'].errors && firstFormGroup.controls['candidateMobile'].errors.required) || (submittedFirst && firstFormGroup.controls['candidateMobile'].errors)\\\"\\n                                        class=\\\"errorTxt\\\">Please Enter Mobile Number</span>\\n                                    <!-- <span *ngIf=\\\"firstFormGroup.touched && firstFormGroup.controls['candidateMobile'].errors\\\" class=\\\"errorTxt\\\">Please Enter Mobile Number</span> -->\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-sm-6\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label for=\\\"occupation\\\">Selection Occupation</label>\\n                                    <select class=\\\"form-control\\\" id=\\\"occupation\\\" \\n                                     \\n                                        formControlName=\\\"occupation\\\" [ngClass]=\\\"{'form-control':true,'red_border': firstFormGroup.controls['occupation'].touched && firstFormGroup.controls['occupation'].errors,'disabledClass':candidForm.candidateDetails.candidatePersonalDetails.occupation ==1 || candidForm.candidateDetails.candidatePersonalDetails.occupation == 2 || candidForm.candidateDetails.candidatePersonalDetails.occupation ==3}\\\">\\n                                        <option [selected]=\\\"true\\\" disabled>Select Occupation</option>\\n                                        <option value=\\\"2\\\" [selected]=\\\"2 == candidForm?.candidateDetails.candidatePersonalDetails.occupation\\\">Student</option>\\n                                        <option value=\\\"3\\\" [selected]=\\\"3 == candidForm?.candidateDetails.candidatePersonalDetails.occupation\\\">Fresher</option>\\n                                        <option value=\\\"1\\\" [selected]=\\\"1 == candidForm?.candidateDetails.candidatePersonalDetails.occupation\\\">Experienced</option>\\n                                    </select>\\n                                    <span *ngIf=\\\"(firstFormGroup.controls['occupation'].touched && firstFormGroup.controls['occupation'].errors) || (submittedFirst && firstFormGroup.controls['occupation'].errors)\\\"\\n                                        class=\\\"errorTxt\\\">Please Select Occupation</span>\\n                                    <!-- <span *ngIf=\\\"firstFormGroup.touched && firstFormGroup.controls['occupation'].errors\\\" class=\\\"errorTxt\\\">Please Enter Occupation</span> -->\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-sm-6 pt-4 mt-1\\\" *ngIf=\\\"firstFormGroup.controls['occupation'].value == 1\\\">\\n                                <mat-checkbox formControlName=\\\"contractPositionStatus\\\">\\n                                    I am interested in contract positions too\\n                                </mat-checkbox>\\n                            </div>\\n                        </form>\\n                        <div class=\\\"text-right pt-4 pb-4\\\">\\n                            <button mat-button matStepperNext class=\\\"submit_btn\\\" (click)=\\\"eductionDetails(firstFormGroup)\\\">\\n                                <b>Next</b>\\n                            </button>\\n                        </div>\\n                    </mat-step>\\n                    <mat-step [stepControl]=\\\"secondFormGroup\\\">\\n                        <div class=\\\"p-4 reg_title text-center\\\">\\n                            <h5>\\n                                <b style=\\\"border-bottom: 2px solid #5ccd71;\\\">Educational Details</b>\\n                            </h5>\\n                        </div>\\n                        <div *ngIf=\\\"qualificationList.length\\\" class=\\\"mb-5\\\">\\n                            <div class=\\\"row\\\" *ngFor=\\\"let qual of qualificationList;let i=index\\\">\\n                                <div class=\\\"col-sm-12\\\">\\n                                    <hr class=\\\"qual_hr\\\" *ngIf=\\\"i!=0\\\">\\n                                </div>\\n                                <p class=\\\"col-sm-12\\\">\\n                                    <b>Qualification - {{i+1}}</b>\\n                                    <span class=\\\"qual_icon\\\">\\n                                        <i class=\\\"material-icons\\\" (click)=\\\"editEducDetails(qual,i)\\\">\\n                                            edit\\n                                        </i>\\n                                    </span>\\n                                    <!-- <span class=\\\"qual_icon\\\" data-toggle=\\\"modal\\\" data-target=\\\"#qualEditModal\\\">\\n                                        <i class=\\\"material-icons\\\" (click)=\\\"editEducDetails(qual,i)\\\">\\n                                            edit\\n                                        </i>\\n                                    </span> -->\\n                                    <span class=\\\"cert_icon pl-4\\\">\\n                                        <i class=\\\"material-icons\\\" (click)=\\\"deleteQual(qual,i)\\\">\\n                                            highlight_off\\n                                        </i>\\n                                    </span>\\n                                </p>\\n                                <div class=\\\"col-sm-4 mb-4\\\">\\n                                    <span>Qualification - {{i+1}} :</span>\\n                                    <span class=\\\"pl-4\\\">\\n                                        <b>{{qual.qualification}}</b>\\n                                    </span>\\n                                </div>\\n                                <div class=\\\"col-sm-8 mb-4\\\">\\n                                        <span>College :</span>\\n                                        <span class=\\\"pl-4\\\">\\n                                            <b>{{qual.collegeName}}</b>\\n                                        </span>\\n                                    </div>\\n                                <div class=\\\"col-sm-4 mb-4\\\">\\n                                    <span>University Name :</span>\\n                                    <span class=\\\"pl-4\\\">\\n                                        <b>{{qual.univercity}}</b>\\n                                    </span>\\n                                </div>\\n                                <div class=\\\"col-sm-8 mb-4\\\">\\n                                    <span>Percentage / CGPA :</span>\\n                                    <span class=\\\"pl-4\\\">\\n                                        <b>{{qual.passPercentage}}</b>\\n                                    </span>\\n                                </div>\\n                                <div class=\\\"col-sm-4 mb-4\\\">\\n                                    <span>Year of Completion :</span>\\n                                    <span class=\\\"pl-4\\\">\\n                                        <b>{{qual.yearOfCompletion}}</b>\\n                                    </span>\\n                                </div>\\n\\n                                <div class=\\\"col-sm-12\\\">\\n                                    <hr class=\\\"qual_hr\\\" *ngIf=\\\"(i+1)==qualificationList.length\\\">\\n                                </div>\\n                            </div>\\n\\n                        </div>\\n                        <div *ngIf=\\\"certificationList.length\\\" class=\\\"mb-5\\\">\\n                            <div class=\\\"row\\\" *ngFor=\\\"let cert of certificationList;let i=index\\\">\\n                                <div class=\\\"col-sm-12\\\">\\n                                    <hr class=\\\"qual_hr\\\" *ngIf=\\\"i!=0\\\">\\n                                </div>\\n\\n                                <p class=\\\"col-sm-12\\\">\\n                                    <b>Certification - {{i+1}}</b>\\n                                    <span class=\\\"qual_icon\\\">\\n                                        <i class=\\\"material-icons\\\" (click)=\\\"editCertDetails(cert,i)\\\">\\n                                            edit\\n                                        </i>\\n                                    </span>\\n                                    <!-- <span class=\\\"qual_icon\\\" data-toggle=\\\"modal\\\" data-target=\\\"#certEditModal\\\">\\n                                        <i class=\\\"material-icons\\\" (click)=\\\"editCertDetails(cert,i)\\\">\\n                                            edit\\n                                        </i>\\n                                    </span> -->\\n                                    <span class=\\\"cert_icon pl-4\\\">\\n                                        <i class=\\\"material-icons\\\" (click)=\\\" deleteCert(cert,i)\\\">\\n                                            highlight_off\\n                                        </i>\\n                                    </span>\\n                                </p>\\n                                <div class=\\\"col-sm-6 mb-4\\\">\\n                                    <span>Certification Name :</span>\\n                                    <span class=\\\"pl-4\\\">\\n                                        <b>{{cert.certificationName}}</b>\\n                                    </span>\\n                                </div>\\n                                <div class=\\\"col-sm-6 mb-4\\\">\\n                                    <span>Year of Completion :</span>\\n                                    <span class=\\\"pl-4\\\">\\n                                        <b>{{cert.yearOfCompletion}}</b>\\n                                    </span>\\n                                </div>\\n                                <div class=\\\"col-sm-6 mb-4\\\">\\n                                    <span>Percentage / CGPA :</span>\\n                                    <span class=\\\"pl-4\\\">\\n                                        <b>{{cert.passPercentage}}</b>\\n                                    </span>\\n                                </div>\\n                                <div class=\\\"col-sm-12\\\">\\n                                    <hr class=\\\"qual_hr\\\" *ngIf=\\\"(i+1)==certificationList.length\\\">\\n                                </div>\\n                            </div>\\n\\n                        </div>\\n\\n                        <form [formGroup]=\\\"secondFormGroup\\\" class=\\\"row\\\" *ngIf=\\\"!isCertf && isEdit\\\">\\n                            <!-- <ng-template matStepLabel>Fill out your address</ng-template> -->\\n                            <div class=\\\"col-sm-12 text-right close_form\\\">\\n                                <span class=\\\"errorTxt pointer\\\">\\n                                    <i class=\\\"material-icons\\\" (click)=\\\"closeSecondForm()\\\">\\n                                        highlight_off\\n                                    </i>\\n                                </span>\\n                            </div>\\n                            <div class=\\\"col-sm-6\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label for=\\\"qualification\\\">Qualification</label>\\n                                    <input type=\\\"text\\\" placeholder=\\\"B.Tech\\\" class=\\\"form-control\\\" formControlName=\\\"qualification\\\" [ngClass]=\\\"{'form-control':true,'red_border': secondFormGroup.controls['qualification'].touched && secondFormGroup.controls['qualification'].errors}\\\">\\n                                    <span class=\\\"errorTxt\\\" *ngIf=\\\"(secondFormGroup.controls['qualification'].touched && secondFormGroup.controls['qualification'].errors && secondFormGroup.controls['qualification'].errors.required) || (QualSubmit && secondFormGroup.controls['qualification'].errors && secondFormGroup.controls['qualification'].errors.required)\\\">Please Enter Qualification</span>\\n                                    <span class=\\\"errorTxt\\\" *ngIf=\\\"secondFormGroup.controls.qualification.errors && secondFormGroup.controls.qualification.errors.pattern\\\">\\n                                        Numbers Not Allowed\\n                                    </span>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-sm-6\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label for=\\\"univercity\\\">University Name</label>\\n                                    <input type=\\\"text\\\" placeholder=\\\"JNTUK\\\" class=\\\"form-control\\\" formControlName=\\\"univercity\\\" [ngClass]=\\\"{'form-control':true,'red_border': secondFormGroup.controls['univercity'].touched && secondFormGroup.controls['univercity'].errors}\\\">\\n                                    <span class=\\\"errorTxt\\\" *ngIf=\\\"(secondFormGroup.controls['univercity'].touched && secondFormGroup.controls['univercity'].errors && secondFormGroup.controls['univercity'].errors.required) || (QualSubmit && secondFormGroup.controls['univercity'].errors && secondFormGroup.controls['univercity'].errors.required)\\\">Please Enter University</span>\\n                                    <span class=\\\"errorTxt\\\" *ngIf=\\\"secondFormGroup.controls.univercity.errors && secondFormGroup.controls.univercity.errors.pattern\\\">\\n                                        Numbers Not Allowed\\n                                    </span>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-sm-6\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label for=\\\"collegeName\\\">College</label>\\n                                    <input type=\\\"text\\\" placeholder=\\\"Layola College\\\" class=\\\"form-control\\\" id=\\\"collegeName\\\" formControlName=\\\"collegeName\\\" [ngClass]=\\\"{'form-control':true,'red_border': secondFormGroup.controls['collegeName'].touched && secondFormGroup.controls['collegeName'].errors}\\\">\\n                                    <span class=\\\"errorTxt\\\" *ngIf=\\\"(secondFormGroup.controls['collegeName'].touched && secondFormGroup.controls['collegeName'].errors && secondFormGroup.controls['collegeName'].errors.required) || (QualSubmit && secondFormGroup.controls['collegeName'].errors && secondFormGroup.controls['collegeName'].errors.required)\\\">Please Provide College Name</span>\\n                                    <span class=\\\"errorTxt\\\" *ngIf=\\\"secondFormGroup.controls.collegeName.errors && secondFormGroup.controls.collegeName.errors.pattern\\\">\\n                                        Numbers Not Allowed\\n                                    </span>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-sm-6\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label for=\\\"passPercentage\\\">Percentage / CGPA</label>\\n                                    <input placeholder=\\\"90.99\\\" type=\\\"number\\\" class=\\\"form-control\\\" id=\\\"passPercentage\\\" formControlName=\\\"passPercentage\\\" [ngClass]=\\\"{'form-control':true,'red_border': secondFormGroup.controls['passPercentage'].touched && secondFormGroup.controls['passPercentage'].errors}\\\">\\n                                    <!-- <span class=\\\"errorTxt\\\" *ngIf=\\\"(secondFormGroup.controls['yearOfCompletion'].touched &&secondFormGroup.controls['yearOfCompletion'].errors) || (QualSubmit &&secondFormGroup.controls['yearOfCompletion'].errors)\\\">Please Enter Percentage</span> -->\\n                                    <span class=\\\"errorTxt\\\" *ngIf=\\\"(secondFormGroup.controls['passPercentage'].touched && secondFormGroup.controls['passPercentage'].errors && secondFormGroup.controls['passPercentage'].errors.required) || (QualSubmit && secondFormGroup.controls['passPercentage'].errors && secondFormGroup.controls['passPercentage'].errors.required)\\\">\\n                                        Please Enter Percentage\\n                                    </span>\\n                                    <!-- <span class=\\\"errorTxt\\\" *ngIf=\\\"secondFormGroup.controls['passPercentage'].touched && secondFormGroup.controls['passPercentage'].errors && secondFormGroup.controls['passPercentage'].errors.pattern\\\">\\n                                        Must be a number with up to 2 decimal places may have %\\n                                    </span> -->\\n                                    <span class=\\\"errorTxt\\\" *ngIf=\\\"secondFormGroup.controls['passPercentage'].touched && secondFormGroup.controls['passPercentage'].errors && secondFormGroup.controls['passPercentage'].errors.max\\\">\\n                                        Please Enter Valid Percentage\\n                                    </span>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-sm-6\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label for=\\\"yearOfCompletion\\\">Year of Completion</label>\\n                                    <input type=\\\"number\\\" placeholder=\\\"2019\\\" class=\\\"form-control\\\" id=\\\"yearOfCompletion\\\" formControlName=\\\"yearOfCompletion\\\" [ngClass]=\\\"{'form-control':true,'red_border': secondFormGroup.controls['yearOfCompletion'].touched && secondFormGroup.controls['yearOfCompletion'].errors}\\\">\\n\\n                                    <span class=\\\"errorTxt\\\" *ngIf=\\\"(secondFormGroup.controls['yearOfCompletion'].touched &&secondFormGroup.controls['yearOfCompletion'].errors) || (QualSubmit &&secondFormGroup.controls['yearOfCompletion'].errors)\\\">Please Enter Year of Completion, Year Should not be More than the Current Year</span>\\n                                   \\n\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-sm-6\\\">\\n                                <button class=\\\"btn btn-success save_btn\\\" (click)=\\\"saveQual()\\\">Save</button>\\n                            </div>\\n                        </form>\\n                        <form [formGroup]=\\\"certificateFormGroup\\\" class=\\\"row\\\" *ngIf=\\\"isCertf && isEdit\\\">\\n                            <!-- <ng-template matStepLabel>Fill out your address</ng-template> -->\\n                            <div class=\\\"col-sm-12 text-right close_form\\\">\\n                                    <span class=\\\"errorTxt pointer\\\">\\n                                        <i class=\\\"material-icons\\\" (click)=\\\"closeCertForm()\\\">\\n                                            highlight_off\\n                                        </i>\\n                                    </span>\\n                                </div>\\n                            <div class=\\\"col-sm-6\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label for=\\\"certificationName\\\">Certification Name</label>\\n                                    <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"certificationName\\\" formControlName=\\\"certificationName\\\" [ngClass]=\\\"{'form-control':true,'red_border': certificateFormGroup.controls['certificationName'].touched && certificateFormGroup.controls['certificationName'].errors}\\\">\\n                                    <span class=\\\"errorTxt\\\" *ngIf=\\\"(certificateFormGroup.controls['certificationName'].touched && certificateFormGroup.controls['certificationName'].errors) || (CertSubmit && certificateFormGroup.controls['certificationName'].errors && certificateFormGroup.controls['certificationName'].errors.required)\\\">Please Mention Certification Name</span>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-sm-6\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label for=\\\"yearOfCompletion\\\">Year of Completion</label>\\n                                    <input type=\\\"number\\\" minlength=\\\"4\\\" maxlength=\\\"4\\\" class=\\\"form-control\\\" id=\\\"yearOfCompletion\\\" formControlName=\\\"yearOfCompletion\\\"\\n                                        [ngClass]=\\\"{'form-control':true,'red_border': certificateFormGroup.controls['yearOfCompletion'].touched && certificateFormGroup.controls['yearOfCompletion'].errors}\\\">\\n                                    <span class=\\\"errorTxt\\\" *ngIf=\\\"(certificateFormGroup.controls['yearOfCompletion'].touched && certificateFormGroup.controls['yearOfCompletion'].errors) || (CertSubmit && certificateFormGroup.controls['yearOfCompletion'].errors && certificateFormGroup.controls['yearOfCompletion'].errors.required)\\\">Please Enter Year of Completion, Year Should not be More than the Current Year</span>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-sm-6\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label for=\\\"passPercentage\\\">Percentage / CGPA</label>\\n                                    <input type=\\\"number\\\" class=\\\"form-control\\\" id=\\\"passPercentage\\\" formControlName=\\\"passPercentage\\\" [ngClass]=\\\"{'form-control':true,'red_border': certificateFormGroup.controls['passPercentage'].touched && certificateFormGroup.controls['passPercentage'].errors}\\\">\\n                                    <span class=\\\"errorTxt\\\" *ngIf=\\\"(certificateFormGroup.controls['passPercentage'].touched && certificateFormGroup.controls['passPercentage'].errors && certificateFormGroup.controls['passPercentage'].errors.required) || (CertSubmit && certificateFormGroup.controls['passPercentage'].errors && certificateFormGroup.controls['passPercentage'].errors.required)\\\">Please Enter Percentage</span>\\n                                    <!-- <span class=\\\"errorTxt\\\" *ngIf=\\\"certificateFormGroup.controls['passPercentage'].touched && certificateFormGroup.controls['passPercentage'].errors && certificateFormGroup.controls['passPercentage'].errors.pattern\\\">\\n                                    Must be a number with up to 2 decimal places may have %</span> -->\\n                                    <span class=\\\"errorTxt\\\" *ngIf=\\\"certificateFormGroup.controls['passPercentage'].touched && certificateFormGroup.controls['passPercentage'].errors && certificateFormGroup.controls['passPercentage'].errors.max\\\">\\n                                        Please Enter Valid Percentage</span>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-sm-6\\\">\\n                                <button class=\\\"btn btn-success save_btn\\\" (click)=\\\"saveCert()\\\">Save</button>\\n                            </div>\\n\\n                        </form>\\n                        <div class=\\\"pt-4 pb-4\\\">\\n                            <button mat-button type=\\\"button\\\" class=\\\"another_btn\\\" (click)=\\\"addQual(secondFormGroup)\\\">+ Add Another Qualification</button>\\n                        </div>\\n                        <div class=\\\"pt-4 pb-4\\\">\\n                            <button type=\\\"button\\\" class=\\\"btn btn-link\\\" (click)=\\\"addCertif(certificateFormGroup)\\\">+ Add Certification</button>\\n                        </div>\\n                        <div class=\\\"text-right pt-4 pb-4\\\">\\n                            <button mat-button matStepperPrevious class=\\\"submit_btn float-left\\\">\\n                                <b>Back</b>\\n                            </button>\\n                            <ng-container *ngIf=\\\"firstFormGroup.controls['occupation'].value != 1\\\">\\n                                <button mat-button matStepperNext class=\\\"submit_btn\\\" (click)=\\\"careerForm()\\\">\\n                                    <b>Finish</b>\\n                                </button>\\n                            </ng-container>\\n                            <ng-container *ngIf=\\\"firstFormGroup.controls['occupation'].value == 1\\\">\\n                                <button mat-button matStepperNext class=\\\"submit_btn\\\" (click)=\\\"checkQualList()\\\">\\n                                    <b>Next</b>\\n                                </button>\\n                            </ng-container>\\n\\n                        </div>\\n                    </mat-step>\\n                    <mat-step [stepControl]=\\\"thirdFormGroup\\\" *ngIf=\\\"firstFormGroup.controls['occupation'].value == 1\\\">\\n                        <!-- <ng-template matStepLabel>Done</ng-template> -->\\n                        <div class=\\\"p-4 reg_title text-center\\\">\\n                            <h5>\\n                                <b style=\\\"border-bottom: 2px solid #5ccd71;\\\">Career Details</b>\\n                            </h5>\\n                        </div>\\n                        <div *ngIf=\\\"experienceList.length\\\" class=\\\"mb-5\\\">\\n                            <div class=\\\"row\\\" *ngFor=\\\"let exp of experienceList;let i=index\\\">\\n                                <p class=\\\"col-sm-12\\\">\\n                                    <b>Experience - {{i+1}}</b>\\n                                    <span class=\\\"qual_icon\\\" (click)=\\\"editExpDetails(exp,i)\\\">\\n                                        <i class=\\\"material-icons\\\">\\n                                            edit\\n                                        </i>\\n                                    </span>\\n                                    <!-- <span class=\\\"qual_icon\\\" (click)=\\\"editExpDetails(exp,i)\\\" data-toggle=\\\"modal\\\" data-target=\\\"#expDetailModal\\\">\\n                                        <i class=\\\"material-icons\\\">\\n                                            edit\\n                                        </i>\\n                                    </span> -->\\n                                    <span class=\\\"cert_icon pl-4\\\">\\n                                        <i class=\\\"material-icons\\\" (click)=\\\"deleteExp(exp,i)\\\">\\n                                            highlight_off\\n                                        </i>\\n                                    </span>\\n                                </p>\\n                                <div class=\\\"col-sm-5 mb-4\\\">\\n                                    <span>Company Name :</span>\\n                                    <span class=\\\"pl-4\\\">\\n                                        <b>{{exp.companyName}}</b>\\n                                    </span>\\n                                </div>\\n                                <div class=\\\"col-sm-7 mb-4\\\">\\n                                    <span>Designation :</span>\\n                                    <span class=\\\"pl-4\\\">\\n                                        <b>{{exp.designation}}</b>\\n                                    </span>\\n                                </div>\\n                                <div class=\\\"col-sm-5 mb-4\\\">\\n                                    <span>Start Date :</span>\\n                                    <span class=\\\"pl-4\\\">\\n                                        <b>{{exp.startDate | date:'mediumDate'}}</b>\\n                                    </span>\\n                                </div>\\n                                <div class=\\\"col-sm-7 mb-4\\\">\\n                                    <span>End Date :</span>\\n                                    <span class=\\\"pl-4\\\" *ngIf=\\\"exp.endDate != 'null'\\\">\\n                                        <b>{{exp.endDate | date:'mediumDate'}}</b>\\n                                    </span>\\n                                    <span class=\\\"pl-4\\\" *ngIf=\\\"exp.endDate == 'null'\\\">\\n                                        <b>-</b>\\n                                    </span>\\n                                </div>\\n                                <div class=\\\"col-sm-5 mb-4\\\">\\n                                    <span>Location :</span>\\n                                    <span class=\\\"pl-4\\\">\\n                                        <b>{{exp.location}}</b>\\n                                    </span>\\n                                </div>\\n                                <div class=\\\"col-sm-7 mb-4\\\">\\n                                    <span>Mode of Employment :</span>\\n                                    <span class=\\\"pl-4\\\">\\n                                        <b>{{exp.modeOfEmployement}}</b>\\n                                    </span>\\n                                </div>\\n                                <div class=\\\"col-sm-5 mb-4\\\">\\n                                    <span>Salary :</span>\\n                                    <span class=\\\"pl-4\\\">\\n                                        <b>{{exp.salary}}</b> &nbsp; &nbsp;\\n                                        <b>{{exp.currency}} </b>\\n                                    </span>\\n                                </div>\\n                                <div class=\\\"col-sm-7 mb-4\\\">\\n                                    <span>Currently Working here:</span>\\n                                    <span class=\\\"pl-4\\\" *ngIf=\\\"exp.currentWorking\\\">\\n                                        <b>Yes</b>\\n                                    </span>\\n                                    <span class=\\\"pl-4\\\" *ngIf=\\\"!exp.currentWorking\\\">\\n                                        <b>No</b>\\n                                    </span>\\n                                </div>\\n                            </div>\\n                            <hr class=\\\"qual_hr\\\">\\n                        </div>\\n\\n                        <form [formGroup]=\\\"thirdFormGroup\\\" class=\\\"row\\\" *ngIf=\\\"expForm\\\">\\n                            <!-- <ng-template matStepLabel>Fill out your address</ng-template> -->\\n                            <div class=\\\"col-sm-12 text-right close_form\\\">\\n                                <span class=\\\"errorTxt pointer\\\">\\n                                    <i class=\\\"material-icons\\\" (click)=\\\"closeThirdForm()\\\">\\n                                        highlight_off\\n                                    </i>\\n                                </span>\\n                            </div>\\n                            <div class=\\\"col-sm-5\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label for=\\\"companyName\\\">Company Name</label>\\n                                    <input type=\\\"text\\\" placeholder=\\\"Nexiilabs\\\" class=\\\"form-control\\\" id=\\\"companyName\\\" formControlName=\\\"companyName\\\" [ngClass]=\\\"{'form-control':true,'red_border': thirdFormGroup.controls['companyName'].touched && thirdFormGroup.controls['companyName'].errors}\\\">\\n                                    <span class=\\\"errorTxt\\\" *ngIf=\\\"(thirdFormGroup.controls['companyName'].touched && thirdFormGroup.controls['companyName'].errors && thirdFormGroup.controls['companyName'].errors.required) || (ExpSub && thirdFormGroup.controls['companyName'].errors && thirdFormGroup.controls['companyName'].errors.required)\\\">\\n                                        Please Provide the Company Name\\n                                    </span>\\n                                    <span class=\\\"errorTxt\\\" *ngIf=\\\"(thirdFormGroup.controls['companyName'].touched && thirdFormGroup.controls['companyName'].errors && thirdFormGroup.controls['companyName'].errors.pattern)\\\">\\n                                        Numbers Not Allowed\\n                                    </span>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-sm-4\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label for=\\\"designation\\\">Designation</label>\\n                                    <input placeholder=\\\"MTS-1\\\" type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"designation\\\" formControlName=\\\"designation\\\" [ngClass]=\\\"{'form-control':true,'red_border': thirdFormGroup.controls['designation'].touched && thirdFormGroup.controls['designation'].errors}\\\">\\n                                    <span class=\\\"errorTxt\\\" *ngIf=\\\"(thirdFormGroup.controls['designation'].touched && thirdFormGroup.controls['designation'].errors) || (ExpSub && thirdFormGroup.controls['designation'].errors  && thirdFormGroup.controls['designation'].errors.required)\\\">\\n                                        Please Provide the Designation\\n                                    </span>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-sm-3\\\"></div>\\n                            <div class=\\\"col-sm-5\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"d-block\\\" for=\\\"startDate\\\">Start Date</label>\\n                                    <mat-form-field>\\n                                        <input placeholder=\\\"MM/DD/YYYY\\\" matInput [matDatepicker]=\\\"picker\\\" [max]=\\\"todayDate\\\" id=\\\"startDate\\\" formControlName=\\\"startDate\\\" [ngClass]=\\\"{'form-control':true,'red_border': thirdFormGroup.controls['startDate'].touched && thirdFormGroup.controls['startDate'].errors}\\\">\\n                                        <mat-datepicker-toggle matSuffix [for]=\\\"picker\\\"></mat-datepicker-toggle>\\n                                        <mat-datepicker #picker></mat-datepicker>\\n                                    </mat-form-field>\\n                                    <span class=\\\"errorTxt\\\" *ngIf=\\\"(thirdFormGroup.controls['startDate'].touched && thirdFormGroup.controls['startDate'].errors) || (ExpSub && thirdFormGroup.controls['startDate'].errors  && thirdFormGroup.controls['startDate'].errors.required)\\\">\\n                                        Please Mention the Start Date\\n                                    </span>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-sm-4\\\" *ngIf='!checkbox.checked'>\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"d-block\\\" for=\\\"endDate\\\">End Date</label>\\n                                    <mat-form-field>\\n                                        <input placeholder=\\\"MM/DD/YYYY\\\" matInput [max]=\\\"todayDate\\\" [matDatepicker]=\\\"picker1\\\" id=\\\"endDate\\\" formControlName=\\\"endDate\\\" [ngClass]=\\\"{'form-control':true,'red_border': thirdFormGroup.controls['endDate'].touched && thirdFormGroup.controls['endDate'].errors}\\\">\\n                                        <mat-datepicker-toggle matSuffix [for]=\\\"picker1\\\"></mat-datepicker-toggle>\\n                                        <mat-datepicker #picker1></mat-datepicker>\\n                                    </mat-form-field>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-sm-3\\\" style=\\\"padding-top: 2.25rem;\\\">\\n                                <mat-checkbox formControlName=\\\"currentWorking\\\" #checkbox [ngClass]=\\\"{'red_border': thirdFormGroup.controls['currentWorking'].touched && thirdFormGroup.controls['currentWorking'].errors}\\\">\\n                                    Currently Working here\\n                                </mat-checkbox>\\n                            </div>\\n                            <div class=\\\"col-sm-5\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label for=\\\"location\\\">Location</label>\\n                                    <input placeholder=\\\"Hyderabad\\\" type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"location\\\" formControlName=\\\"location\\\" [ngClass]=\\\"{'form-control':true,'red_border': thirdFormGroup.controls['location'].touched && thirdFormGroup.controls['location'].errors}\\\">\\n                                    <span class=\\\"errorTxt\\\" *ngIf=\\\" (thirdFormGroup.controls['location'].touched && thirdFormGroup.controls['location'].errors && thirdFormGroup.controls['location'].errors.required) || (ExpSub && thirdFormGroup.controls['location'].errors && thirdFormGroup.controls['location'].errors.required)\\\">\\n                                        Please Provide the Location\\n                                    </span>\\n                                    <span class=\\\"errorTxt\\\" *ngIf=\\\" (thirdFormGroup.controls['location'].touched && thirdFormGroup.controls['location'].errors && thirdFormGroup.controls['location'].errors.pattern)\\\">\\n                                        Numbers Not Allowed\\n                                    </span>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-sm-4\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label for=\\\"modeOfEmployement\\\">Mode of Employment</label>\\n                                    <select class=\\\"form-control\\\" id=\\\"modeOfEmployement\\\" formControlName=\\\"modeOfEmployement\\\" [ngClass]=\\\"{'form-control':true,'red_border': thirdFormGroup.controls['modeOfEmployement'].touched && thirdFormGroup.controls['modeOfEmployement'].errors}\\\">\\n                                        <option [selected]=\\\"true\\\" disabled>Select Mode</option>\\n                                        <option>Permanent</option>\\n                                        <option>Contract</option>\\n                                    </select>\\n                                    <span class=\\\"errorTxt\\\" *ngIf=\\\"(thirdFormGroup.controls['modeOfEmployement'].touched && thirdFormGroup.controls['modeOfEmployement'].errors) || (ExpSub && thirdFormGroup.controls['modeOfEmployement'].errors  && thirdFormGroup.controls['modeOfEmployement'].errors.required)\\\">\\n                                        Please Select the Mode of Employment\\n                                    </span>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-sm-3\\\"></div>\\n                            <div class=\\\"col-sm-5\\\">\\n                                <div class=\\\"row\\\">\\n                                    <div class=\\\"col-sm-8\\\">\\n                                        <div class=\\\"form-group\\\">\\n                                            <label for=\\\"salary\\\">Salary (Lacs Per Annum)</label>\\n                                            <input placeholder=\\\"5 (or) 3.25 (or) 7.5 ..\\\" type=\\\"number\\\" class=\\\"form-control\\\" id=\\\"salary\\\" formControlName=\\\"salary\\\" [ngClass]=\\\"{'form-control':true,'red_border': thirdFormGroup.controls['salary'].touched && thirdFormGroup.controls['salary'].errors}\\\">\\n                                            <span class=\\\"errorTxt\\\" *ngIf=\\\"(thirdFormGroup.controls['salary'].touched && thirdFormGroup.controls['salary'].errors && thirdFormGroup.controls['salary'].errors.required) || (ExpSub && thirdFormGroup.controls['salary'].errors && thirdFormGroup.controls['salary'].errors.required)\\\">\\n                                                Please Enter the salary\\n                                            </span>\\n                                            <!-- <span class=\\\"errorTxt\\\" *ngIf=\\\"thirdFormGroup.controls['salary'].touched && thirdFormGroup.controls['salary'].errors && thirdFormGroup.controls['salary'].errors.pattern\\\">\\n                                                Only Numbers upto two decimals are allowed\\n                                            </span> -->\\n                                        </div>\\n                                    </div>\\n                                    <div class=\\\"col-sm-4\\\">\\n                                        <div class=\\\"form-group\\\">\\n                                            <label for=\\\"currency\\\">Currency</label>\\n                                            <select class=\\\"form-control\\\" id=\\\"currency\\\" formControlName=\\\"currency\\\" [ngClass]=\\\"{'form-control':true,'red_border': thirdFormGroup.controls['currency'].touched && thirdFormGroup.controls['currency'].errors}\\\">\\n                                                <option [selected]=\\\"true\\\" disabled>Select Currency</option>\\n                                                <option>INR</option>\\n                                                <option>USD</option>\\n                                            </select>\\n                                            <span class=\\\"errorTxt\\\" *ngIf=\\\"(thirdFormGroup.controls['currency'].touched && thirdFormGroup.controls['currency'].errors) || (ExpSub && thirdFormGroup.controls['currency'].errors && thirdFormGroup.controls['currency'].errors.required)\\\">\\n                                                Please Select the Currency\\n                                            </span>\\n                                        </div>\\n                                    </div>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-sm-4\\\">\\n                                <button class=\\\"btn btn-success save_btn\\\" (click)=\\\"addExp(thirdFormGroup)\\\">Save</button>\\n                            </div>\\n\\n                        </form>\\n                        <div class=\\\"pt-4 pb-4\\\">\\n                            <button *ngIf=\\\"experienceList.length\\\" mat-button type=\\\"button\\\" class=\\\"another_btn\\\" (click)=\\\"addExpForm()\\\">+ Add Another Experience</button>\\n\\n                            <button *ngIf=\\\"!experienceList.length\\\" mat-button type=\\\"button\\\" class=\\\"another_btn\\\" (click)=\\\"addExpForm()\\\">+ Add Experience</button>\\n                        </div>\\n                        <div class=\\\"text-right pt-4 pb-4\\\">\\n                            <button mat-button matStepperPrevious class=\\\"submit_btn float-left\\\">\\n                                <b>Back</b>\\n                            </button>\\n                            <button mat-button matStepperNext class=\\\"submit_btn\\\" (click)=\\\"careerForm(thirdFormGroup)\\\">\\n                                <b>Finish</b>\\n                            </button>\\n                        </div>\\n                    </mat-step>\\n                </mat-horizontal-stepper>\\n            </div>\\n        </div>\\n    </div>\\n</section>\\n\\n<!-- The Modal -->\\n<div class=\\\"modal\\\" id=\\\"qualEditModal\\\">\\n    <div class=\\\"modal-dialog\\\">\\n        <div class=\\\"modal-content\\\">\\n\\n            <!-- Modal Header -->\\n            <div class=\\\"modal-header\\\">\\n                <h4 class=\\\"modal-title\\\">Education Details</h4>\\n                <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\">&times;</button>\\n            </div>\\n\\n            <!-- Modal body -->\\n            <div class=\\\"modal-body\\\">\\n                <form [formGroup]=\\\"secondFormGroup\\\" class=\\\"row\\\">\\n                    <!-- <ng-template matStepLabel>Fill out your address</ng-template> -->\\n                    <input type=\\\"hidden\\\" [(ngModel)]=\\\"qualEditData.candidateEducationDetailsId\\\" id=\\\"candidateEducationDetailsId\\\"\\n                    formControlName=\\\"candidateEducationDetailsId\\\">\\n                    <div class=\\\"col-sm-6\\\">\\n                        <div class=\\\"form-group\\\">\\n                            <label for=\\\"qualification\\\">Qualification</label>\\n                            <input type=\\\"text\\\" placeholder=\\\"B.Tech\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"qualEditData.qualification\\\" id=\\\"qualification\\\"\\n                                formControlName=\\\"qualification\\\" [ngClass]=\\\"{'form-control':true,'red_border': secondFormGroup.controls['qualification'].touched && secondFormGroup.controls['qualification'].errors}\\\">\\n                                <span class=\\\"errorTxt\\\" *ngIf=\\\"(secondFormGroup.controls['qualification'].touched && secondFormGroup.controls['qualification'].errors && secondFormGroup.controls['qualification'].errors.required)\\\">Please Enter Qualification</span>\\n                                <span class=\\\"errorTxt\\\" *ngIf=\\\"(secondFormGroup.controls['qualification'].touched && secondFormGroup.controls['qualification'].errors && secondFormGroup.controls['qualification'].errors.pattern)\\\">Numbers Not Allowed</span>\\n                            </div>\\n                    </div>\\n                    <div class=\\\"col-sm-6\\\">\\n                        <div class=\\\"form-group\\\">\\n                            <label for=\\\"univercity\\\">University Name</label>\\n                            <input type=\\\"text\\\" placeholder=\\\"JNTUK\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"qualEditData.univercity\\\" id=\\\"univercity\\\" formControlName=\\\"univercity\\\"\\n                                [ngClass]=\\\"{'form-control':true,'red_border': secondFormGroup.controls['univercity'].touched && secondFormGroup.controls['univercity'].errors}\\\">\\n                                <span class=\\\"errorTxt\\\" *ngIf=\\\"(secondFormGroup.controls['univercity'].touched && secondFormGroup.controls['univercity'].errors && secondFormGroup.controls['univercity'].errors.required)\\\">Please Enter University</span>\\n                                <span class=\\\"errorTxt\\\" *ngIf=\\\"(secondFormGroup.controls['univercity'].touched && secondFormGroup.controls['univercity'].errors && secondFormGroup.controls['univercity'].errors.pattern)\\\">Numbers Not Allowed</span>\\n                            </div>\\n                    </div>\\n                    <div class=\\\"col-sm-6\\\">\\n                        <div class=\\\"form-group\\\">\\n                            <label for=\\\"collegeName\\\">College</label>\\n                            <input type=\\\"text\\\" placeholder=\\\"Layola College\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"qualEditData.collegeName\\\" id=\\\"collegeName\\\"\\n                                formControlName=\\\"collegeName\\\" [ngClass]=\\\"{'form-control':true,'red_border': secondFormGroup.controls['collegeName'].touched && secondFormGroup.controls['collegeName'].errors}\\\">\\n                                <span class=\\\"errorTxt\\\" *ngIf=\\\"(secondFormGroup.controls['collegeName'].touched && secondFormGroup.controls['collegeName'].errors && secondFormGroup.controls['collegeName'].errors.required)\\\">Please Provide College Name</span>\\n                                <span class=\\\"errorTxt\\\" *ngIf=\\\"(secondFormGroup.controls['collegeName'].touched && secondFormGroup.controls['collegeName'].errors && secondFormGroup.controls['collegeName'].errors.pattern)\\\">Numbers Not Allowed</span>\\n                            </div>\\n                    </div>\\n                    <div class=\\\"col-sm-6\\\">\\n                        <div class=\\\"form-group\\\">\\n                            <label for=\\\"passPercentage\\\">Percentage</label>\\n                            <input placeholder=\\\"90.99\\\" type=\\\"number\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"qualEditData.passPercentage\\\" id=\\\"passPercentage\\\"\\n                                formControlName=\\\"passPercentage\\\" [ngClass]=\\\"{'form-control':true,'red_border': secondFormGroup.controls['passPercentage'].touched && secondFormGroup.controls['passPercentage'].errors}\\\">\\n                                <span class=\\\"errorTxt\\\" *ngIf=\\\"(secondFormGroup.controls['passPercentage'].touched && secondFormGroup.controls['passPercentage'].errors && secondFormGroup.controls['passPercentage'].errors.required)\\\">\\n                                    Please Enter Percentage\\n                                </span>\\n                                <span class=\\\"errorTxt\\\" *ngIf=\\\"secondFormGroup.controls['passPercentage'].touched && secondFormGroup.controls['passPercentage'].errors && secondFormGroup.controls['passPercentage'].errors.max\\\">\\n                                    Please Enter Valid Percentage\\n                                </span>\\n                            </div>\\n                    </div>\\n                    <div class=\\\"col-sm-6\\\">\\n                        <div class=\\\"form-group\\\">\\n                            <label for=\\\"yearOfCompletion\\\">Year of Completion</label>\\n                            <input type=\\\"number\\\" placeholder=\\\"2019\\\" class=\\\"form-control\\\" id=\\\"yearOfCompletion\\\" formControlName=\\\"yearOfCompletion\\\" [(ngModel)]=\\\"qualEditData.yearOfCompletion\\\"\\n                                [ngClass]=\\\"{'form-control':true,'red_border': secondFormGroup.controls['yearOfCompletion'].touched && secondFormGroup.controls['yearOfCompletion'].errors}\\\">\\n                                <span class=\\\"errorTxt\\\" *ngIf=\\\"(secondFormGroup.controls['yearOfCompletion'].touched &&secondFormGroup.controls['yearOfCompletion'].errors) || (QualSubmit &&secondFormGroup.controls['yearOfCompletion'].errors)\\\">Please Enter Year of Completion, Year Should not be More than the Current Year</span>\\n                                <!-- <span class=\\\"errorTxt\\\" \\n                            *ngIf=\\\"secondFormGroup.controls['yearOfCompletion'].errors\\\">Please Enter Valid Mobile Number</span> -->\\n                        </div>\\n                    </div>\\n                </form>\\n            </div>\\n\\n            <!-- Modal footer -->\\n            <div class=\\\"modal-footer\\\">\\n                <button type=\\\"button\\\" class=\\\"btn btn-danger\\\" data-dismiss=\\\"modal\\\" (click)=\\\"editQualification(qual,i)\\\" [disabled]=\\\"secondFormGroup.invalid\\\">Update</button>\\n            </div>\\n\\n        </div>\\n    </div>\\n</div>\\n\\n<!-- The Modal -->\\n<div class=\\\"modal\\\" id=\\\"certEditModal\\\">\\n    <div class=\\\"modal-dialog\\\">\\n        <div class=\\\"modal-content\\\">\\n\\n            <!-- Modal Header -->\\n            <div class=\\\"modal-header\\\">\\n                <h4 class=\\\"modal-title\\\">Certification Details</h4>\\n                <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\">&times;</button>\\n            </div>\\n\\n            <!-- Modal body -->\\n            <div class=\\\"modal-body\\\">\\n                <form [formGroup]=\\\"certificateFormGroup\\\" class=\\\"row\\\">\\n                    <!-- <ng-template matStepLabel>Fill out your address</ng-template> -->\\n                    <input type=\\\"hidden\\\" [(ngModel)]=\\\"qualEditData.candidateCertificationId\\\" id=\\\"candidateCertificationId\\\"\\n                    formControlName=\\\"candidateCertificationId\\\">\\n                    <div class=\\\"col-sm-6\\\">\\n                        <div class=\\\"form-group\\\">\\n                            <label for=\\\"certificationName\\\">Certification Name</label>\\n                            <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"certEditData.certificationName\\\" id=\\\"certificationName\\\" formControlName=\\\"certificationName\\\"\\n                                [ngClass]=\\\"{'form-control':true,'red_border': certificateFormGroup.controls['certificationName'].touched && certificateFormGroup.controls['certificationName'].errors}\\\">\\n                                <span class=\\\"errorTxt\\\" *ngIf=\\\"(certificateFormGroup.controls['certificationName'].touched && certificateFormGroup.controls['certificationName'].errors)\\\">Please Mention Certification Name</span>\\n                            </div>\\n                    </div>\\n                    <div class=\\\"col-sm-6\\\">\\n                        <div class=\\\"form-group\\\">\\n                            <label for=\\\"yearOfCompletion\\\">Year of Completion</label>\\n                            <input type=\\\"number\\\" minlength=\\\"4\\\" maxlength=\\\"4\\\" [(ngModel)]=\\\"certEditData.yearOfCompletion\\\" class=\\\"form-control\\\" id=\\\"yearOfCompletion\\\"\\n                                formControlName=\\\"yearOfCompletion\\\" [ngClass]=\\\"{'form-control':true,'red_border': certificateFormGroup.controls['yearOfCompletion'].touched && certificateFormGroup.controls['yearOfCompletion'].errors}\\\">\\n                                <span class=\\\"errorTxt\\\" *ngIf=\\\"(certificateFormGroup.controls['yearOfCompletion'].touched && certificateFormGroup.controls['yearOfCompletion'].errors) || (CertSubmit && certificateFormGroup.controls['yearOfCompletion'].errors && certificateFormGroup.controls['yearOfCompletion'].errors.required)\\\">Please Enter Year of Completion, Year Should not be More than the Current Year</span>\\n                            </div>\\n                    </div>\\n                    <div class=\\\"col-sm-6\\\">\\n                        <div class=\\\"form-group\\\">\\n                            <label for=\\\"passPercentage\\\">Percentage / CGPA</label>\\n                            <input type=\\\"number\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"certEditData.passPercentage\\\" id=\\\"passPercentage\\\" formControlName=\\\"passPercentage\\\"\\n                                [ngClass]=\\\"{'form-control':true,'red_border': certificateFormGroup.controls['passPercentage'].touched && certificateFormGroup.controls['passPercentage'].errors}\\\">\\n                                <span class=\\\"errorTxt\\\" *ngIf=\\\"(certificateFormGroup.controls['passPercentage'].touched && certificateFormGroup.controls['passPercentage'].errors && certificateFormGroup.controls['passPercentage'].errors.required)\\\">Please Enter Percentage</span>\\n                                <!-- <span class=\\\"errorTxt\\\" *ngIf=\\\"certificateFormGroup.controls['passPercentage'].touched && certificateFormGroup.controls['passPercentage'].errors && certificateFormGroup.controls['passPercentage'].errors.pattern\\\">\\n                                Must be a number with up to 2 decimal places may have %</span> -->\\n                                <span class=\\\"errorTxt\\\" *ngIf=\\\"certificateFormGroup.controls['passPercentage'].touched && certificateFormGroup.controls['passPercentage'].errors && certificateFormGroup.controls['passPercentage'].errors.max\\\">\\n                                    Please Enter Valid Percentage</span>\\n                            </div>\\n                    </div>\\n\\n                </form>\\n            </div>\\n\\n            <!-- Modal footer -->\\n            <div class=\\\"modal-footer\\\">\\n                <button type=\\\"button\\\" class=\\\"btn btn-danger\\\" data-dismiss=\\\"modal\\\" (click)=\\\"editCertification(cert,i)\\\" [disabled]=\\\"certificateFormGroup.invalid\\\">Update</button>\\n            </div>\\n\\n        </div>\\n    </div>\\n</div>\\n\\n\\n<!-- The Modal -->\\n<div class=\\\"modal\\\" id=\\\"expDetailModal\\\">\\n    <div class=\\\"modal-dialog\\\">\\n        <div class=\\\"modal-content\\\">\\n\\n            <!-- Modal Header -->\\n            <div class=\\\"modal-header\\\">\\n                <h4 class=\\\"modal-title\\\">Experience Details</h4>\\n                <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\">&times;</button>\\n            </div>\\n\\n            <!-- Modal body -->\\n            <div class=\\\"modal-body\\\">\\n                <form [formGroup]=\\\"thirdFormGroup\\\" class=\\\"row\\\">\\n                    <!-- <ng-template matStepLabel>Fill out your address</ng-template> -->\\n                    <input type=\\\"hidden\\\" [(ngModel)]=\\\"qualEditData.candidateProfessionalDetailsId\\\" id=\\\"candidateProfessionalDetailsId\\\"\\n                    formControlName=\\\"candidateProfessionalDetailsId\\\">\\n                    <div class=\\\"col-sm-5\\\">\\n                        <div class=\\\"form-group\\\">\\n                            <label for=\\\"companyName\\\">Company Name</label>\\n                            <input type=\\\"text\\\" placeholder=\\\"Nexiilabs\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"expDetails.companyName\\\" id=\\\"companyName\\\" formControlName=\\\"companyName\\\"\\n                                [ngClass]=\\\"{'form-control':true,'red_border': thirdFormGroup.controls['companyName'].touched && thirdFormGroup.controls['companyName'].errors}\\\">\\n                                <span class=\\\"errorTxt\\\" *ngIf=\\\"(thirdFormGroup.controls['companyName'].touched && thirdFormGroup.controls['companyName'].errors && thirdFormGroup.controls['companyName'].errors.required)\\\">\\n                                        Please Provide the Company Name\\n                                    </span>\\n                                    <span class=\\\"errorTxt\\\" *ngIf=\\\"(thirdFormGroup.controls['companyName'].touched && thirdFormGroup.controls['companyName'].errors && thirdFormGroup.controls['companyName'].errors.pattern)\\\">\\n                                        Numbers Not Allowed\\n                                    </span>\\n                            </div>\\n                    </div>\\n                    <div class=\\\"col-sm-4\\\">\\n                        <div class=\\\"form-group\\\">\\n                            <label for=\\\"designation\\\">Designation</label>\\n                            <input placeholder=\\\"MTS-1\\\" type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"expDetails.designation\\\" id=\\\"designation\\\" formControlName=\\\"designation\\\"\\n                                [ngClass]=\\\"{'form-control':true,'red_border': thirdFormGroup.controls['designation'].touched && thirdFormGroup.controls['designation'].errors}\\\">\\n                                <span class=\\\"errorTxt\\\" *ngIf=\\\"(thirdFormGroup.controls['designation'].touched && thirdFormGroup.controls['designation'].errors)\\\">\\n                                        Please Provide the Designation\\n                                    </span>\\n                            </div>\\n                    </div>\\n                    <div class=\\\"col-sm-3\\\"></div>\\n                    <div class=\\\"col-sm-5\\\" *ngIf=\\\"expDetails && expDetails.startDate\\\">\\n                        <div class=\\\"form-group\\\">\\n                            <label class=\\\"d-block\\\" for=\\\"startDate\\\">Start Date</label>\\n                            <mat-form-field>\\n                                <input placeholder=\\\"MM/DD/YYYY\\\" matInput [max]=\\\"todayDate\\\" [matDatepicker]=\\\"picker\\\" id=\\\"startDate\\\" formControlName=\\\"startDate\\\" [ngClass]=\\\"{'form-control':true,'red_border': thirdFormGroup.controls['startDate'].touched && thirdFormGroup.controls['startDate'].errors}\\\">\\n                                <mat-datepicker-toggle matSuffix [for]=\\\"picker\\\"></mat-datepicker-toggle>\\n                                <mat-datepicker #picker></mat-datepicker>\\n                            </mat-form-field>\\n                            <span class=\\\"errorTxt\\\" *ngIf=\\\"(thirdFormGroup.controls['startDate'].touched && thirdFormGroup.controls['startDate'].errors)\\\">\\n                                    Please Mention the Start Date\\n                                </span>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"col-sm-4\\\" *ngIf='!checkbox.checked'>\\n                        <div class=\\\"form-group\\\">\\n                            <label class=\\\"d-block\\\" for=\\\"endDate\\\">End Date</label>\\n                            <mat-form-field>\\n                                <input placeholder=\\\"MM/DD/YYYY\\\" matInput [max]=\\\"todayDate\\\" [matDatepicker]=\\\"picker1\\\" id=\\\"endDate\\\" formControlName=\\\"endDate\\\" [ngClass]=\\\"{'form-control':true,'red_border': thirdFormGroup.controls['endDate'].touched && thirdFormGroup.controls['endDate'].errors}\\\">\\n                                <mat-datepicker-toggle matSuffix [for]=\\\"picker1\\\"></mat-datepicker-toggle>\\n                                <mat-datepicker #picker1></mat-datepicker>\\n                            </mat-form-field>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"col-sm-3\\\" style=\\\"padding-top: 2.25rem;\\\">\\n                        <mat-checkbox formControlName=\\\"currentWorking\\\" #checkbox [ngClass]=\\\"{'red_border': thirdFormGroup.controls['currentWorking'].touched && thirdFormGroup.controls['currentWorking'].errors}\\\">\\n                            Currently Working here\\n                        </mat-checkbox>\\n                    </div>\\n                    <div class=\\\"col-sm-5\\\">\\n                        <div class=\\\"form-group\\\">\\n                            <label for=\\\"location\\\">Location</label>\\n                            <input placeholder=\\\"Hyderabad\\\" type=\\\"text\\\" [(ngModel)]=\\\"expDetails.location\\\" class=\\\"form-control\\\" id=\\\"location\\\" formControlName=\\\"location\\\"\\n                                [ngClass]=\\\"{'form-control':true,'red_border': thirdFormGroup.controls['location'].touched && thirdFormGroup.controls['location'].errors}\\\">\\n                                <span class=\\\"errorTxt\\\" *ngIf=\\\"(thirdFormGroup.controls['location'].touched && thirdFormGroup.controls['location'].errors && thirdFormGroup.controls['location'].errors.required)\\\">\\n                                        Please Provide the Location\\n                                    </span>\\n                                    <span class=\\\"errorTxt\\\" *ngIf=\\\"(thirdFormGroup.controls['location'].touched && thirdFormGroup.controls['location'].errors && thirdFormGroup.controls['location'].errors.pattern)\\\">\\n                                        Numbers Not Allowed\\n                                    </span>\\n                            </div>\\n                    </div>\\n                    <div class=\\\"col-sm-4\\\">\\n                        <div class=\\\"form-group\\\">\\n                            <label for=\\\"modeOfEmployement\\\">Mode of Employment</label>\\n                            <select class=\\\"form-control\\\" id=\\\"modeOfEmployement\\\" [(ngModel)]=\\\"expDetails.modeOfEmployement\\\" formControlName=\\\"modeOfEmployement\\\"\\n                                [ngClass]=\\\"{'form-control':true,'red_border': thirdFormGroup.controls['modeOfEmployement'].touched && thirdFormGroup.controls['modeOfEmployement'].errors}\\\">\\n                                <option [selected]=\\\"true\\\" disabled>Select Mode</option>\\n                                <option>Permanent</option>\\n                                <option>Contract</option>\\n                            </select>\\n                            <span class=\\\"errorTxt\\\" *ngIf=\\\"(thirdFormGroup.controls['modeOfEmployement'].touched && thirdFormGroup.controls['modeOfEmployement'].errors)\\\">\\n                                    Please Select the Mode of Employment\\n                                </span>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"col-sm-3\\\"></div>\\n                    <div class=\\\"col-sm-5\\\">\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"col-sm-8\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label for=\\\"salary\\\">Salary (Lacs Per Annum)</label>\\n                                    <input placeholder=\\\"5\\\" type=\\\"number\\\" [(ngModel)]=\\\"expDetails.salary\\\" class=\\\"form-control\\\" id=\\\"salary\\\" formControlName=\\\"salary\\\"\\n                                        [ngClass]=\\\"{'form-control':true,'red_border': thirdFormGroup.controls['salary'].touched && thirdFormGroup.controls['salary'].errors}\\\">\\n                                        <span class=\\\"errorTxt\\\" *ngIf=\\\"(thirdFormGroup.controls['salary'].touched && thirdFormGroup.controls['salary'].errors && thirdFormGroup.controls['salary'].errors.required)\\\">\\n                                            Please Enter the salary\\n                                        </span>\\n                                    </div>\\n                            </div>\\n                            <div class=\\\"col-sm-4\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label for=\\\"currency\\\">Currency</label>\\n                                    <select class=\\\"form-control\\\" id=\\\"currency\\\" [(ngModel)]=\\\"expDetails.currency\\\" formControlName=\\\"currency\\\" [ngClass]=\\\"{'form-control':true,'red_border': thirdFormGroup.controls['currency'].touched && thirdFormGroup.controls['currency'].errors}\\\">\\n                                        <option [selected]=\\\"true\\\" disabled>Select Currency</option>\\n                                        <option>INR</option>\\n                                        <option>USD</option>\\n                                    </select>\\n                                    <span class=\\\"errorTxt\\\" *ngIf=\\\"(thirdFormGroup.controls['currency'].touched && thirdFormGroup.controls['currency'].errors)\\\">\\n                                            Please Select the Currency\\n                                        </span>\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <!-- <div class=\\\"col-sm-4\\\">\\n                    <button class=\\\"btn btn-success save_btn\\\" (click)=\\\"updateExp(thirdFormGroup)\\\">Update</button>\\n                </div> -->\\n\\n                </form>\\n            </div>\\n\\n            <!-- Modal footer -->\\n            <div class=\\\"modal-footer\\\">\\n                <button type=\\\"button\\\" class=\\\"btn btn-danger\\\" (click)=\\\"updateExp(thirdFormGroup)\\\" \\n                    [disabled]=\\\"!thirdFormGroup.valid\\\">Update</button>\\n            </div>\\n\\n        </div>\\n    </div>\\n</div>\\n\"","module.exports = \"<block-ui>\\n       \\n    </block-ui>\\n    <div class=\\\"login_section\\\">\\n        <div class=\\\"login-gradient\\\">\\n            <div class=\\\"coccon_title\\\">\\n                <img src=\\\"./../../../assets/images/ncd_finalized_logo.png\\\" width=\\\"144px\\\" height=\\\"50px\\\" style=\\\"margin:0.28rem;padding-top:2px ;padding-bottom:2px ;\\\" />\\n            </div>\\n            <div class=\\\"\\\">\\n                <div class=\\\"col-sm-4 pl-4 pr-4 pt-5 pb-5 form_center rounded\\\">\\n                    <div class=\\\"login_round_img boxShadow\\\">\\n                        <img src=\\\"./../../../assets//images/boy.png\\\">\\n                    </div>\\n                    <form>\\n                        <!-- <div class=\\\"form-group flname_inline pr-3\\\">\\n                            <label for=\\\"fname\\\">First Name</label>\\n                            <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"fname\\\" name=\\\"fname\\\">\\n                        </div>\\n                        <div class=\\\"form-group flname_inline pl-3\\\">\\n                            <label for=\\\"lname\\\">Last Name</label>\\n                            <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"lname\\\" name=\\\"lname\\\">\\n                        </div> -->\\n                        <div class=\\\"form-group mt-4\\\">\\n                            <label for=\\\"lname\\\">Enter Unique Code (\\n                                <small>ex. DIVYV28ZBFP0</small> )</label>\\n                            <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"otp\\\" name=\\\"otp\\\"\\n                                [(ngModel)]=\\\"otp\\\">\\n                            <p class=\\\"text-right\\\">\\n                                <small>OTP is sent to your registered mobile email</small>\\n                            </p>\\n                        </div>\\n                        <div class=\\\"text-center\\\">\\n                            <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\" \\n                                (click)=\\\"getCandidateDetails()\\\">Proceed</button>\\n                        </div>\\n                    </form>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\"","module.exports = \".tenant_reg_sec{\\n    height:100%;\\n    /* background-color: #12BCFF; */\\n    /* background-color: #D63031; */\\n    background-color: #2ECC71;\\n    /* background-image: url('./../../../assets/images/office_building.jpg'); */\\n    background-size: cover;\\n    position: fixed;\\n    overflow:auto;\\n}\\n.tenant_reg_gradient{\\n    /* background-image: linear-gradient(0.40turn,rgba(61, 112, 178, 0.89), rgba(65, 214, 195, 0.89),rgba(85, 150, 230, 0.89)); */\\n    height: 100%;\\n    overflow:auto;\\n}\\n.coc_title{\\n    color: #ffffff;\\n    font-weight: 700; \\n}\\n.submit_btn{\\n    /* background-color: #19bbfc; */\\n    /* background-color: #d63732; */\\n    background-color: #2ECC71;\\n    color: #ffffff;\\n    padding: 5px 40px;\\n}\\n.another_btn{\\n    border:1px solid #707070;\\n    color:#707070;\\n}\\n.reg_title{\\n    /* color: #19bbfc; */\\n    /* color: #d63732; */\\n    color: #2ECC71;\\n}\\n.qual_hr{\\n    border-top: 2px dashed #1CBC90; \\n}\\n.qual_icon i{\\n    color: #1CBC90;\\n    position: relative;\\n    top: 3px;\\n    left: 10px;\\n    font-size: 20px;\\n}\\n.cert_icon i{\\n    color: #FA7070;\\n    position: relative;\\n    top: 3px;\\n    left: 10px;\\n    font-size: 20px;\\n    cursor: pointer;\\n}\\n.test_tile{\\n    color:#ffffff;\\n}\\n.test_tile hr{\\n    border-width: 1px;\\n    width: 25%;\\n    border-color: #ffffff;\\n    margin: 0 auto;\\n}\\n.qual_icon i{\\n    cursor: pointer;\\n}\\ninput::-webkit-input-placeholder{\\n    opacity:0.5\\n}\\n.scheduledDob{\\n    pointer-events: none;\\n    cursor: not-allowed;\\n}\\n.scheduledDob input{\\n    background-color: #e9ecef; \\n}\\n.disabledClass{\\n    pointer-events: none;\\n    cursor: not-allowed;\\n    background-color: #e9ecef; \\n}\\n.disabledClass_dob{\\n   \\n}\\n.disabledClass_dob input{\\n    background-color: #e9ecef; \\n    pointer-events: none;\\n    cursor: not-allowed;\\n}\\n.save_btn{\\n    margin-top: 30px;\\n    width: 100%;\\n    background-color: #1CBC90;\\n    color: #ffffff;\\n    border-color: #1CBC90;\\n}\\n#expDetailModal .modal-dialog{\\n    max-width: 1000px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvQ29tcG9uZW50cy9jYW5kaWRhdGUtcmVnaXN0cmF0aW9uL2NhbmRpZGF0ZS1yZWdpc3RyYXRpb24uY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLFdBQVc7SUFDWCwrQkFBK0I7SUFDL0IsK0JBQStCO0lBQy9CLHlCQUF5QjtJQUN6QiwyRUFBMkU7SUFDM0Usc0JBQXNCO0lBQ3RCLGVBQWU7SUFDZixhQUFhO0FBQ2pCO0FBQ0E7SUFDSSw2SEFBNkg7SUFDN0gsWUFBWTtJQUNaLGFBQWE7QUFDakI7QUFDQTtJQUNJLGNBQWM7SUFDZCxnQkFBZ0I7QUFDcEI7QUFDQTtJQUNJLCtCQUErQjtJQUMvQiwrQkFBK0I7SUFDL0IseUJBQXlCO0lBQ3pCLGNBQWM7SUFDZCxpQkFBaUI7QUFDckI7QUFDQTtJQUNJLHdCQUF3QjtJQUN4QixhQUFhO0FBQ2pCO0FBQ0E7SUFDSSxvQkFBb0I7SUFDcEIsb0JBQW9CO0lBQ3BCLGNBQWM7QUFDbEI7QUFDQTtJQUNJLDhCQUE4QjtBQUNsQztBQUNBO0lBQ0ksY0FBYztJQUNkLGtCQUFrQjtJQUNsQixRQUFRO0lBQ1IsVUFBVTtJQUNWLGVBQWU7QUFDbkI7QUFDQTtJQUNJLGNBQWM7SUFDZCxrQkFBa0I7SUFDbEIsUUFBUTtJQUNSLFVBQVU7SUFDVixlQUFlO0lBQ2YsZUFBZTtBQUNuQjtBQUNBO0lBQ0ksYUFBYTtBQUNqQjtBQUNBO0lBQ0ksaUJBQWlCO0lBQ2pCLFVBQVU7SUFDVixxQkFBcUI7SUFDckIsY0FBYztBQUNsQjtBQUNBO0lBQ0ksZUFBZTtBQUNuQjtBQUNBO0lBQ0k7QUFDSjtBQUNBO0lBQ0ksb0JBQW9CO0lBQ3BCLG1CQUFtQjtBQUN2QjtBQUNBO0lBQ0kseUJBQXlCO0FBQzdCO0FBQ0E7SUFDSSxvQkFBb0I7SUFDcEIsbUJBQW1CO0lBQ25CLHlCQUF5QjtBQUM3QjtBQUNBOztBQUVBO0FBQ0E7SUFDSSx5QkFBeUI7SUFDekIsb0JBQW9CO0lBQ3BCLG1CQUFtQjtBQUN2QjtBQUNBO0lBQ0ksZ0JBQWdCO0lBQ2hCLFdBQVc7SUFDWCx5QkFBeUI7SUFDekIsY0FBYztJQUNkLHFCQUFxQjtBQUN6QjtBQUNBO0lBQ0ksaUJBQWlCO0FBQ3JCIiwiZmlsZSI6InNyYy9hcHAvQ29tcG9uZW50cy9jYW5kaWRhdGUtcmVnaXN0cmF0aW9uL2NhbmRpZGF0ZS1yZWdpc3RyYXRpb24uY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi50ZW5hbnRfcmVnX3NlY3tcbiAgICBoZWlnaHQ6MTAwJTtcbiAgICAvKiBiYWNrZ3JvdW5kLWNvbG9yOiAjMTJCQ0ZGOyAqL1xuICAgIC8qIGJhY2tncm91bmQtY29sb3I6ICNENjMwMzE7ICovXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzJFQ0M3MTtcbiAgICAvKiBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJy4vLi4vLi4vLi4vYXNzZXRzL2ltYWdlcy9vZmZpY2VfYnVpbGRpbmcuanBnJyk7ICovXG4gICAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcbiAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgb3ZlcmZsb3c6YXV0bztcbn1cbi50ZW5hbnRfcmVnX2dyYWRpZW50e1xuICAgIC8qIGJhY2tncm91bmQtaW1hZ2U6IGxpbmVhci1ncmFkaWVudCgwLjQwdHVybixyZ2JhKDYxLCAxMTIsIDE3OCwgMC44OSksIHJnYmEoNjUsIDIxNCwgMTk1LCAwLjg5KSxyZ2JhKDg1LCAxNTAsIDIzMCwgMC44OSkpOyAqL1xuICAgIGhlaWdodDogMTAwJTtcbiAgICBvdmVyZmxvdzphdXRvO1xufVxuLmNvY190aXRsZXtcbiAgICBjb2xvcjogI2ZmZmZmZjtcbiAgICBmb250LXdlaWdodDogNzAwOyBcbn1cbi5zdWJtaXRfYnRue1xuICAgIC8qIGJhY2tncm91bmQtY29sb3I6ICMxOWJiZmM7ICovXG4gICAgLyogYmFja2dyb3VuZC1jb2xvcjogI2Q2MzczMjsgKi9cbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMkVDQzcxO1xuICAgIGNvbG9yOiAjZmZmZmZmO1xuICAgIHBhZGRpbmc6IDVweCA0MHB4O1xufVxuLmFub3RoZXJfYnRue1xuICAgIGJvcmRlcjoxcHggc29saWQgIzcwNzA3MDtcbiAgICBjb2xvcjojNzA3MDcwO1xufVxuLnJlZ190aXRsZXtcbiAgICAvKiBjb2xvcjogIzE5YmJmYzsgKi9cbiAgICAvKiBjb2xvcjogI2Q2MzczMjsgKi9cbiAgICBjb2xvcjogIzJFQ0M3MTtcbn1cbi5xdWFsX2hye1xuICAgIGJvcmRlci10b3A6IDJweCBkYXNoZWQgIzFDQkM5MDsgXG59XG4ucXVhbF9pY29uIGl7XG4gICAgY29sb3I6ICMxQ0JDOTA7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIHRvcDogM3B4O1xuICAgIGxlZnQ6IDEwcHg7XG4gICAgZm9udC1zaXplOiAyMHB4O1xufVxuLmNlcnRfaWNvbiBpe1xuICAgIGNvbG9yOiAjRkE3MDcwO1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICB0b3A6IDNweDtcbiAgICBsZWZ0OiAxMHB4O1xuICAgIGZvbnQtc2l6ZTogMjBweDtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG59XG4udGVzdF90aWxle1xuICAgIGNvbG9yOiNmZmZmZmY7XG59XG4udGVzdF90aWxlIGhye1xuICAgIGJvcmRlci13aWR0aDogMXB4O1xuICAgIHdpZHRoOiAyNSU7XG4gICAgYm9yZGVyLWNvbG9yOiAjZmZmZmZmO1xuICAgIG1hcmdpbjogMCBhdXRvO1xufVxuLnF1YWxfaWNvbiBpe1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbn1cbmlucHV0Ojotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVye1xuICAgIG9wYWNpdHk6MC41XG59XG4uc2NoZWR1bGVkRG9ie1xuICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICAgIGN1cnNvcjogbm90LWFsbG93ZWQ7XG59XG4uc2NoZWR1bGVkRG9iIGlucHV0e1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNlOWVjZWY7IFxufVxuLmRpc2FibGVkQ2xhc3N7XG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gICAgY3Vyc29yOiBub3QtYWxsb3dlZDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTllY2VmOyBcbn1cbi5kaXNhYmxlZENsYXNzX2RvYntcbiAgIFxufVxuLmRpc2FibGVkQ2xhc3NfZG9iIGlucHV0e1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNlOWVjZWY7IFxuICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICAgIGN1cnNvcjogbm90LWFsbG93ZWQ7XG59XG4uc2F2ZV9idG57XG4gICAgbWFyZ2luLXRvcDogMzBweDtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMUNCQzkwO1xuICAgIGNvbG9yOiAjZmZmZmZmO1xuICAgIGJvcmRlci1jb2xvcjogIzFDQkM5MDtcbn1cbiNleHBEZXRhaWxNb2RhbCAubW9kYWwtZGlhbG9ne1xuICAgIG1heC13aWR0aDogMTAwMHB4O1xufSJdfQ== */\"","import { Component, OnInit,OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { FormControl } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { AllServicesService } from \"./../../Services/AllServices/all-services.service\"\nimport { BlockUI, NgBlockUI } from 'ng-block-ui';\nimport { DatePipe } from '@angular/common';\ndeclare var $;\n\n\n@Component({\n  selector: 'app-candidate-registration',\n  templateUrl: './candidate-registration.component.html',\n  styleUrls: ['./candidate-registration.component.css']\n})\nexport class CandidateRegistrationComponent implements OnInit,OnDestroy {\n\n  todayDate:any;\n\n  QualSubmit:boolean;\n  CertSubmit:boolean;\n  ExpSub:boolean;\n\n  qualEditBack:any;\n  certEditBack:any;\n  expDetailsBack:any;\n\n  expForm: boolean = true;\n  expDetails: any = {\n    companyName: null,\n    designation: null,\n    startDate: null,\n    endDate: null,\n    currentWorking: [false],\n    location: null,\n    modeOfEmployement: null,\n    salary: null,\n    // contractInterest:[false,Validators.required],\n    currency: null\n  };\n  expIndex: number;\n  isEdit: boolean = true;\n  certIndex: number;\n  educIndex: number;\n  submittedFirst: boolean;\n  testTiltle: any;\n  @BlockUI() blockUI: NgBlockUI;\n\n  public qualEditData: object = {\n    'qualification': null,\n    'univercity': null,\n    'collegeName': null,\n    'passPercentage': null,\n    'yearOfCompletion': null\n  };\n  public certEditData: object = {\n    'certificationName': null,\n    'yearOfCompletion': null,\n    'passPercentage': null\n  }\n  public candidForm: object = {\n    \"candidateDetails\": {\n      \"candidatePersonalDetails\": {\n        \"candidateFirstName\": null,\n        \"candidateGender\": null,\n        \"candidateId\": 0,\n        \"candidateLastName\": null,\n        \"candidateLocation\": null,\n        \"candidateMail\": null,\n        \"candidateMobile\": null,\n        \"candidateName\": null,\n        \"candidateQualification\": null,\n        \"maritalStatus\": null,\n        \"occupation\": null,\n      },\n      \"certificationDetails\": [],\n      \"educationDetails\": [],\n      \"encryptedToken\": null,\n      \"professionalDetails\": []\n    }\n  }\n  testTypeId: any;\n  encryptedToken: any;\n\n  isLinear = true;\n  firstFormGroup: FormGroup;\n  secondFormGroup: FormGroup;\n  editSecondFormGroup: FormGroup;\n  certificateFormGroup: FormGroup;\n  thirdFormGroup: FormGroup;\n  secondForm: boolean;\n  thirdForm: boolean;\n  isCertf: boolean;\n  isQUal: boolean = true;\n\n  qualificationList: any[] = [];\n  certificationList: any[] = []\n  experienceList: any[] = [];\n\n\n  constructor(private _formBuilder: FormBuilder, private router: Router, private datePipe: DatePipe, private activeRoute: ActivatedRoute, private apiService: AllServicesService) {\n    this.activeRoute.params.subscribe(params => {\n      this.encryptedToken = params['encryptedToken'];\n    })\n\n    this.todayDate = new Date();\n\n    // this.testTypeId = localStorage.getItem('testTypeId')\n    // if (localStorage.getItem('encryptedToken')) {\n    //   this.encryptedToken = localStorage.getItem('encryptedToken');\n    // }\n\n    this.testLinkVerify();\n\n    if (JSON.parse(localStorage.getItem('regForm'))) {\n      this.candidForm = JSON.parse(localStorage.getItem('regForm'));\n     // // console.log(\"this.candidForm\", this.candidForm)\n      if (this.candidForm[\"candidateDetails\"]['educationDetails'].length) {\n        this.qualificationList = this.candidForm[\"candidateDetails\"]['educationDetails'];\n      }\n      if (this.qualificationList.length > 0) {\n        // this.isLinear = false;\n      }\n      if (this.candidForm[\"candidateDetails\"]['certificationDetails'].length) {\n        this.certificationList = this.candidForm[\"candidateDetails\"]['certificationDetails'];\n      }\n      if (this.candidForm[\"candidateDetails\"]['professionalDetails'].length) {\n        this.experienceList = this.candidForm[\"candidateDetails\"]['professionalDetails'];\n        this.experienceList.forEach((item,i)=>{\n          if(item['endDate'] == 'null'){\n            this.experienceList[i]['endDate'] = null;\n          }else{\n            this.experienceList[i]['endDate'] = new Date(item['endDate'])\n          }\n          if(item['startDate'] == 'null'){\n            this.experienceList[i]['startDate'] = null;\n          }else{\n            this.experienceList[i]['startDate'] = new Date(item['startDate'])\n          }\n         // // console.log('this.experienceListtttttttttttttttttt',this.experienceList)\n        })\n      }\n    } else {\n      this.candidForm = {\n        \"candidateDetails\": {\n          \"candidatePersonalDetails\": {\n            \"candidateFirstName\": null,\n            \"candidateDateOfBirth\": null,\n            \"candidateGender\": null,\n            \"candidateId\": 0,\n            \"candidateLastName\": null,\n            \"candidateLocation\": null,\n            \"candidateMail\": null,\n            \"candidateMobile\": null,\n            \"candidateName\": null,\n            \"candidateQualification\": null,\n            \"maritalStatus\": null,\n            \"occupation\": null,\n          },\n          \"certificationDetails\": [],\n          \"educationDetails\": [],\n          \"encryptedToken\": null,\n          \"professionalDetails\": []\n        }\n      }\n    }\n\n    \n  }\n\n  afterEditWithBack(qual){\n      this.qualificationList = qual;\n  }\n\n  ngOnDestroy(){\n    localStorage.removeItem('regForm')\n  }\n  startDOB=false;\n  ngOnInit() {\n   if(this.candidForm['candidateDetails'].candidatePersonalDetails.candidateDateOfBirth != \"null\"){\n    this.startDOB=true;\n   } \n   \n   var self = this;\n    $('#qualEditModal').on('hidden.bs.modal', function () {\n     // // console.log(\"before\",self.qualificationList)\n      // self.qualificationList.splice(self.educIndex,1,self.qualEditBack)\n      self.qualificationList[self.educIndex] = self.qualEditBack;\n      self.afterEditWithBack(self.qualificationList)\n      self.secondFormGroup.reset();\n     // // console.log(\"after\",self.qualificationList)\n      \n    })\n\n    \n\n    $('#certEditModal').on('hidden.bs.modal', function () {\n      self.certificationList.splice(self.certIndex,1,self.certEditBack)\n      self.certificateFormGroup.reset();\n    })\n\n    $('#expDetailModal').on('hidden.bs.modal', function () {\n      self.experienceList.splice(self.expIndex,1,self.expDetailsBack)\n    })\n \n\n    var date = new Date();\n    var fullYear = date.getFullYear()\n\n    this.firstFormGroup = this._formBuilder.group({\n      candidateFirstName: ['', [Validators.required, Validators.minLength(3), Validators.pattern('^[a-zA-Z ]*$')]],\n      candidateLastName: ['', [Validators.required, Validators.pattern('^[a-zA-Z ]*$')]],\n      candidateDateOfBirth: ['', Validators.required],\n      candidateMail: ['', [Validators.required, Validators.email]],\n      candidateGender: ['', Validators.required],\n      candidateMobile: ['', [Validators.required, Validators.min(1000000000), Validators.max(9999999999)]],\n      maritalStatus: ['', Validators.required],\n      occupation: ['', Validators.required],\n      contractPositionStatus: [false]\n    });\n\n    // this.firstFormGroup.errors\n    this.secondFormGroup = this._formBuilder.group({\n      candidateEducationDetailsId:[''],\n      qualification: ['', [Validators.required,Validators.pattern('^[a-zA-Z. ]*$')]],\n      univercity: ['', [Validators.required,Validators.pattern('^[a-zA-Z. ]*$')]],\n      collegeName: ['', [Validators.required,Validators.pattern('^[a-zA-Z. ]*$')]],\n      // passPercentage: ['', [Validators.required, Validators.pattern('[0-9]+(\\.[0-9]{1,2})?%?'),Validators.max(100)]],\n      passPercentage: ['', [Validators.required,Validators.max(100)]],\n      yearOfCompletion: ['', [Validators.required, Validators.min(1947), Validators.max(fullYear)]]\n    });\n    this.editSecondFormGroup = this._formBuilder.group({\n      qualification: ['', Validators.required],\n      univercity: ['', Validators.required],\n      collegeName: ['', Validators.required],\n      // passPercentage: ['', [Validators.required, Validators.pattern('[0-9]+(\\.[0-9]{1,2})?%?')]],\n      passPercentage: ['', [Validators.required,Validators.max(100)]],\n      yearOfCompletion: ['', [Validators.required, Validators.min(1947), Validators.max(fullYear)]]\n    });\n    this.certificateFormGroup = this._formBuilder.group({\n      candidateCertificationId: [''],\n      certificationName: ['', Validators.required],\n      yearOfCompletion: ['', [Validators.required, Validators.min(1947), Validators.max(fullYear)]],\n      // passPercentage: ['', [Validators.required, Validators.pattern('[0-9]+(\\.[0-9]{1,2})?%?'),Validators.max(100)]]\n      passPercentage: ['', [Validators.required,Validators.max(100)]],\n    });\n    this.thirdFormGroup = this._formBuilder.group({\n      candidateProfessionalDetailsId: [''],\n      companyName: ['', [Validators.required,Validators.pattern('^[a-zA-Z ]*$')]],\n      designation: ['', Validators.required],\n      startDate: ['', Validators.required],\n      endDate: ['',],\n      currentWorking: [false],\n      location: ['', [Validators.required,Validators.pattern('^[a-zA-Z ]*$')]],\n      modeOfEmployement: ['', Validators.required],\n      // salary: ['', [Validators.required,Validators.pattern('^[0-9]*\\.[0-9]{2}$')]],\n      // salary: ['', [Validators.required, Validators.pattern('^[1-9]*$')]],\n      // salary: ['', [Validators.required, Validators.pattern('[0-9]+(\\.[0-9][0-9]?)?')]],\n      salary: ['', [Validators.required]],\n      // contractInterest:[false,Validators.required],\n      currency: ['', Validators.required]\n    });\n  }\n\n  testLinkVerify() {\n    this.apiService.postData('testmanagement/testconfig/testlinkverification?encryptedToken=' + encodeURIComponent(this.encryptedToken), {})\n      .subscribe(res => {\n        this.blockUI.stop();\n        if (res['statusCode'] == '1') {\n          this.testTypeId = res['testTypeId'];\n          this.testTiltle = res['testTitle']\n         \n        }\n        if (this.testTypeId == 1) {\n           if(!JSON.parse(localStorage.getItem('regForm'))){\n              this.router.navigate(['candidate/login',this.encryptedToken])\n          }\n          this.firstFormGroup = this._formBuilder.group({\n            candidateFirstName: [this.candidForm['candidateDetails'].candidatePersonalDetails.candidateFirstName, [Validators.required, Validators.minLength(3), Validators.pattern('^[a-zA-Z ]*$')]],\n            candidateLastName: [this.candidForm['candidateDetails'].candidatePersonalDetails.candidateLastName, [Validators.required, Validators.pattern('^[a-zA-Z ]*$')]],\n            candidateDateOfBirth: [this.candidForm['candidateDetails'].candidatePersonalDetails.candidateDateOfBirth.replace(/-/g, \"/\"), Validators.required],\n            candidateMail: [this.candidForm['candidateDetails'].candidatePersonalDetails.candidateMail, [Validators.required, Validators.email]],\n            candidateGender: [this.candidForm['candidateDetails'].candidatePersonalDetails.candidateGender, Validators.required],\n            candidateMobile: [this.candidForm['candidateDetails'].candidatePersonalDetails.candidateMobile, [Validators.required, Validators.min(1000000000), Validators.max(9999999999)]],\n            maritalStatus: [this.candidForm['candidateDetails'].candidatePersonalDetails.maritalStatus, Validators.required],\n            occupation: [this.candidForm['candidateDetails'].candidatePersonalDetails.occupation, Validators.required],\n            contractPositionStatus: [this.candidForm['candidateDetails'].candidatePersonalDetails.contractPositionStatus == '1']\n          });\n         // // console.log(\"this.firstFormGroup......\", this.firstFormGroup)\n        } else if (this.testTypeId == 2) {\n\n          this.startDOB=false;\n          this.firstFormGroup = this._formBuilder.group({\n            candidateFirstName: ['', [Validators.required, Validators.minLength(3), Validators.pattern('^[a-zA-Z ]*$')]],\n            candidateLastName: ['', [Validators.required, Validators.pattern('^[a-zA-Z ]*$')]],\n            candidateDateOfBirth: ['', Validators.required],\n            candidateMail: ['', [Validators.required, Validators.email]],\n            candidateGender: ['', Validators.required],\n            candidateMobile: ['', [Validators.required, Validators.min(1000000000), Validators.max(9999999999)]],\n            maritalStatus: ['', Validators.required],\n            occupation: ['', Validators.required],\n            contractPositionStatus: [false]\n          });\n        }\n\n      }, error => {\n        this.blockUI.stop();\n      })\n  }\n\n  eductionDetails(firstFormGroup) {\n    this.submittedFirst = true;\n   // // console.log(firstFormGroup)\n    if(this.qualificationList.length > 0){\n      this.isLinear = false;\n      this.isEdit = false;\n    }\n  }\n\n  addQual(secondFormGroup) {\n    this.QualSubmit = false;\n    this.isEdit = true;\n    this.isQUal = true;\n    this.isCertf = false;\n    if(this.secondFormGroup.valid){\n      if(this.educIndex == 0 || this.educIndex){\n          this.qualificationList.splice(this.educIndex,1,this.secondFormGroup.value)\n      }\n      this.secondFormGroup.reset();\n    }\n    this.secondFormGroup.reset();\n    // if (secondFormGroup.valid) {\n    //   var secForm = this.qualificationList.find((item) => {\n    //     return item == secondFormGroup.value;\n    //   });\n    //   if (secForm == undefined) {\n    //     this.qualificationList.push(this.secondFormGroup.value)\n    //     this.secondFormGroup.reset();\n    //   }\n\n\n    // }\n    if (this.qualificationList.length > 0) {\n      this.isLinear = false;\n    }\n  }\n\n  checkQualList() {\n   // // console.log(\"this.qualificationList\",this.qualificationList)\n    if(this.qualificationList.length > 0){\n      this.isLinear = false;\n      if(this.experienceList.length >0){\n        this.expForm = false;\n      }\n    }else{\n      this.apiService.errorAlert('Please Provide Atleast One Qualification to Proceed')\n    }\n  }\n\n  editExpDetails(exp, i) {\n    this.expForm = false;\n    this.expDetails = exp;\n    this.expDetailsBack = {\n      ...exp\n    }\n    // this.expDetails['startDate'] = new FormControl(new Date(this.expDetails['startDate']).toISOString()).value;\n   // // console.log(\"this.expDetails\", this.expDetails)\n    this.expIndex = i;\n    //// // console.log(\"this.expDetails\",this.expDetails)\n    this.thirdFormGroup = this._formBuilder.group({\n      candidateProfessionalDetailsId: [this.expDetails.candidateProfessionalDetailsId],\n      companyName: [this.expDetails.companyName, [Validators.required,Validators.pattern('^[a-zA-Z ]*$')]],\n      designation: [this.expDetails.designation, Validators.required],\n      startDate: [this.expDetails.startDate, Validators.required],\n      endDate: [this.expDetails.endDate],\n      currentWorking: [this.expDetails.currentWorking],\n      location: [this.expDetails.location, [Validators.required,Validators.pattern('^[a-zA-Z ]*$')]],\n      modeOfEmployement: [this.expDetails.modeOfEmployement, Validators.required],\n      // salary: [this.expDetails.salary, [Validators.required,Validators.pattern('[0-9]+(\\.[0-9][0-9]?)?')]],\n      salary: [this.expDetails.salary, [Validators.required]],\n      // contractInterest:[false,Validators.required],\n      currency: [this.expDetails.currency, Validators.required]\n    });\n\n    $('#expDetailModal').modal('show')\n    \n    // this.thirdFormGroup = this._formBuilder.group({\n    //   companyName: ['', Validators.required],\n    //   designation: ['', Validators.required],\n    //   startDate: ['', Validators.required],\n    //   endDate: ['',],\n    //   currentWorking: [false],\n    //   location: ['', Validators.required],\n    //   modeOfEmployement: ['', Validators.required],\n    //   // salary: ['', [Validators.required,Validators.pattern('^[0-9]*\\.[0-9]{2}$')]],\n    //   // salary: ['', [Validators.required, Validators.pattern('^[1-9]*$')]],\n    //   salary: ['', [Validators.required, Validators.pattern('[0-9]+(\\.[0-9][0-9]?)?')]],\n    //   // contractInterest:[false,Validators.required],\n    //   currency: ['', Validators.required]\n    // });\n\n  }\n\n  updateExp(thirdFormGroup) {\n    var startDate = new Date(thirdFormGroup.value['startDate'])\n    var endDate = new Date(thirdFormGroup.value['endDate'])\n    if(startDate.getTime() > endDate.getTime()){\n      this.apiService.errorAlert('End Date Should be After Start Date')\n      return false;\n    }\n    if (this.thirdFormGroup.valid) {\n      var editData = {\n        ...this.thirdFormGroup.value\n      }\n      // this.qualificationList.splice(this.educIndex, 1, editData);\n      if(thirdFormGroup.value['currentWorking'] || thirdFormGroup.value['endDate']){\n        this.experienceList.splice(this.expIndex, 1, editData);\n        this.expDetailsBack = editData;\n        if(thirdFormGroup.value['currentWorking']){\n          delete this.experienceList[this.expIndex].endDate;\n        }\n        $('#expDetailModal').modal('hide');\n        this.thirdFormGroup.reset();\n      }else{\n        this.apiService.errorAlert('Please Select atleast one from end date (or) Currently working')\n        return false;\n      }\n    }\n\n  }\n\n  addExp(thirdFormGroup) {\n    this.ExpSub = true;\n    if (thirdFormGroup.valid) {\n      var startDate = new Date(thirdFormGroup.value['startDate'])\n      var endDate = new Date(thirdFormGroup.value['endDate'])\n      if(startDate.getTime() > endDate.getTime()){\n        this.apiService.errorAlert('End Date Should be After Start Date')\n        return false;\n      }\n      if(thirdFormGroup.value['currentWorking'] || thirdFormGroup.value['endDate']){\n        this.experienceList.push(thirdFormGroup.value);\n        if(thirdFormGroup.value['currentWorking']){\n         delete this.experienceList[this.experienceList.length-1].endDate;\n        }\n        this.thirdFormGroup.reset();\n        this.expForm = false;\n      }else{\n        this.apiService.errorAlert('Please Select atleast one from end date (or) Currently working')\n        return false;\n      }\n    }\n    \n    // this.experienceList.push(thirdFormGroup.value);\n\n   // // console.log(this.firstFormGroup)\n   // // console.log(this.secondFormGroup)\n   // // console.log(this.thirdFormGroup)\n  }\n\n  addExpForm(){\n    this.expForm = true;\n    this.ExpSub = false;\n\n    this.thirdFormGroup = this._formBuilder.group({\n      candidateProfessionalDetailsId: [''],\n      companyName: ['', [Validators.required,Validators.pattern('^[a-zA-Z ]*$')]],\n      designation: ['', Validators.required],\n      startDate: ['', Validators.required],\n      endDate: ['',],\n      currentWorking: [false],\n      location: ['', [Validators.required,Validators.pattern('^[a-zA-Z ]*$')]],\n      modeOfEmployement: ['', Validators.required],\n      // salary: ['', [Validators.required,Validators.pattern('^[0-9]*\\.[0-9]{2}$')]],\n      // salary: ['', [Validators.required, Validators.pattern('^[1-9]*$')]],\n      // salary: ['', [Validators.required, Validators.pattern('[0-9]+(\\.[0-9][0-9]?)?')]],\n      salary: ['', [Validators.required]],\n      // contractInterest:[false,Validators.required],\n      currency: ['', Validators.required]\n    });\n\n    // if(this.thirdFormGroup.valid){\n    //   if(this.expIndex == 0 || this.expIndex ){\n    //     this.experienceList.splice(this.expIndex,1,this.thirdFormGroup.value)\n    //   }\n    // }\n    // this.thirdFormGroup.reset();\n  }\n  addCertif(certificateFormGroup) {\n    this.CertSubmit = false;\n    this.isCertf = true;\n    this.isEdit = true;\n    this.isQUal = false;\n    if(this.certificateFormGroup.valid){\n      if(this.certIndex == 0 || this.certIndex){\n          this.certificationList.splice(this.certIndex,1,this.certificateFormGroup.value)\n      }\n      this.certificateFormGroup.reset();\n    }\n    // if (this.certificateFormGroup.valid) {\n    //   var cerFor = this.certificationList.find((item) => {\n    //     return item == certificateFormGroup.value\n    //   })\n    //   if (cerFor == undefined) {\n    //     this.certificationList.push(certificateFormGroup.value);\n    //     this.certificateFormGroup.reset();\n    //   }\n    //   // this.certificationList.push(certificateFormGroup.value);\n\n    // }\n  }\n\n  careerForm(thirdFormGroup) {\n\n    this.blockUI.start('Please Wait ...')\n\n   // // console.log(\"firstForm\", this.firstFormGroup);\n   // // console.log(\"secondForm\", this.secondFormGroup);\n   // // console.log(\"education\", this.qualificationList);\n   // // console.log(\"certification\", this.certificationList);\n   // // console.log(this.thirdFormGroup);\n   // // console.log(this.experienceList);\n\n    // if (this.secondFormGroup.valid) {\n    //   var secForm = this.qualificationList.findIndex((item)=>{\n    //    return item == this.secondFormGroup.value\n    //   });\n    //   if (secForm < 0) {\n    //     this.qualificationList.push(this.secondFormGroup.value);\n    //     this.secondFormGroup.reset();\n    //   }\n    // }\n\n    // if (this.certificateFormGroup.valid) {\n    //   var cerForm = this.certificationList.find(item =>{\n    //    return  item == this.certificateFormGroup.value\n    //   });\n    //   if (cerForm == undefined) {\n    //     this.certificationList.push(this.certificateFormGroup.value)\n    //     this.certificateFormGroup.reset()\n    //   }\n    // }\n\n    // if (this.thirdFormGroup.valid) {\n    //   var thirdFor = this.experienceList.find(item =>{\n    //     return item == this.thirdFormGroup.value\n    //   });\n    //   if(thirdFor == undefined){\n    //     this.experienceList.push(this.thirdFormGroup.value)\n    //     this.thirdFormGroup.reset()\n    //   }\n\n    // }\n\n    if (this.testTypeId == '2') {\n\n      //  date format\n      var personDetails = this.firstFormGroup.value;\n      if (personDetails['contractPositionStatus']) {\n        personDetails['contractPositionStatus'] = \"1\"\n      } else {\n        personDetails['contractPositionStatus'] = \"0\"\n      }\n      personDetails['candidateDateOfBirth'] = this.convertToDate(personDetails['candidateDateOfBirth'],'dob')\n\n      var expList: any[] = [];\n      this.experienceList.forEach(item => {\n        item['startDate'] = this.convertToDate(item['startDate'])\n        // item['startDate'] = this.datePipe.transform(item['startDate'],'yyyy-MM-dd');\n        item['endDate'] = this.convertToDate(item['endDate'])\n        // item['endDate'] = this.datePipe.transform(item['endDate'],'yyyy-MM-dd');\n\n        ////// console.log(this.datePipe.transform(item['endDate'],'yyyy-MM-dd'));\n        if (item['currentWorking']) {\n          delete item['endDate']\n          item['currentWorking'] = 1\n        } else {\n          item['currentWorking'] = 0\n        }\n        expList.push(item)\n      })\n      // \n      var data = {\n        \"candidatePersonalDetails\": personDetails,\n        \"certificationDetails\": this.certificationList,\n        \"educationDetails\": this.qualificationList,\n        \"encryptedToken\": this.encryptedToken,\n        \"professionalDetails\": expList\n      }\n      this.apiService.postData('testmanagement/testconfig/candidatewalkinregistration', data)\n        .subscribe(res => {\n          this.blockUI.stop()\n          if (res['statusCode'] == \"1\") {\n            this.router.navigate(['candidate/walkin', res['encryptedToken']])\n            this.apiService.successAlert(res['statusMessage'])\n            this.firstFormGroup.reset();\n            this.secondFormGroup.reset();\n            this.certificateFormGroup.reset();\n            this.thirdFormGroup.reset();\n          } else {\n            this.apiService.errorAlert(res['statusMessage'])\n          }\n        }, error => {\n          this.blockUI.stop()\n        })\n    } else {\n      this.firstFormGroup.value['candidateId'] = this.candidForm['candidateDetails']['candidatePersonalDetails']['candidateId']\n\n      // date format\n      var personDetails = this.firstFormGroup.value;\n      personDetails['candidateDateOfBirth'] = this.convertToDate(personDetails['candidateDateOfBirth'],'dob')\n\n      if (personDetails['contractPositionStatus']) {\n        personDetails['contractPositionStatus'] = \"1\"\n      } else {\n        personDetails['contractPositionStatus'] = \"0\"\n      }\n\n      var expList: any[] = [];\n      this.experienceList.forEach(item => {\n        item['startDate'] = this.convertToDate(item['startDate'])\n        // item['startDate'] = this.datePipe.transform(item['startDate'],'yyyy-MM-dd');\n        item['endDate'] = this.convertToDate(item['endDate'])\n        // item['endDate'] = this.datePipe.transform(item['endDate'],'yyyy-MM-dd');\n\n        if (item['currentWorking']) {\n\n          item['currentWorking'] = 1\n        } else {\n          item['currentWorking'] = 0\n        }\n        expList.push(item)\n\n      })\n     // // console.log(\"hfsgdsgxgd\" + this.experienceList);\n\n      // end date format\n     // // console.log(expList);\n      data = {\n        \"candidatePersonalDetails\": personDetails,\n        \"certificationDetails\": this.certificationList,\n        \"educationDetails\": this.qualificationList,\n        \"encryptedToken\": this.encryptedToken,\n        \"professionalDetails\": expList\n      }\n      this.apiService.postData('testmanagement/testconfig/candidateregistration', data)\n        .subscribe(res => {\n          this.blockUI.stop()\n          if (res['statusCode'] == \"1\" && res['examStatus'] == 'active') {\n            this.router.navigate(['/exam', res['testInstanceId']])\n            localStorage.setItem('encryptedToken', this.encryptedToken)\n            this.apiService.successAlert(res['statusMessage'])\n            this.firstFormGroup.reset();\n            this.secondFormGroup.reset();\n            this.certificateFormGroup.reset();\n            this.thirdFormGroup.reset();\n          } else {\n            this.apiService.errorAlert(res['statusMessage'])\n          }\n        }, error => {\n          this.blockUI.stop()\n        },()=>{\n          this.blockUI.stop();\n        })\n\n    }\n\n\n  }\n\n  convertToDate(dat,dob?) {\n    if (typeof dat == 'object') {\n      var date = new Date(dat);\n      var mnth;\n      var day;\n      if ((date.getMonth() + 1) > 9) {\n        mnth = ((date.getMonth() + 1));\n      } else {\n        mnth = (\"0\" + (date.getMonth() + 1)).slice(-2);\n      }\n\n      if (date.getDate() > 9) {\n        day = (date.getDate());\n      } else {\n        day = (\"0\" + date.getDate()).slice(-2);\n      }\n      if(dob){\n        return [day,mnth,date.getFullYear()].join(\"-\");\n      }else{\n        return [date.getFullYear(),mnth,day].join(\"-\");\n      }\n     \n    } else if (typeof dat == \"string\") {\n      var createDate = dat.split('-')\n      if(dob){\n         var date = new Date(Number(createDate[2]),Number(createDate[1])-1,Number(createDate[0]));\n      }else{\n        var date = new Date(Number(createDate[0]),Number(createDate[1])-1,Number(createDate[2]));\n      }\n     \n      var mnth;\n      var day;\n      if ((date.getMonth() + 1) > 9) {\n        mnth = ((date.getMonth() + 1));\n      } else {\n        mnth = (\"0\" + (date.getMonth() + 1)).slice(-2);\n      }\n\n      if (date.getDate() > 9) {\n        day = (date.getDate());\n      } else {\n        day = (\"0\" + date.getDate()).slice(-2);\n      }\n\n      if(dob){\n        return [day,mnth,date.getFullYear()].join(\"-\");\n      }else{\n        return [date.getFullYear(),mnth,day].join(\"-\");\n      }\n\n      // return [date.getFullYear(),mnth,day].join(\"-\");\n      // return dat;\n    } else {\n      return dat;\n    }\n\n  }\n\n  checkMail() {\n    if (this.firstFormGroup.controls.candidateMail.errors && this.firstFormGroup.controls.candidateMail.errors.email) {\n      return this.firstFormGroup.controls.candidateMail.errors.email\n    } else {\n      return false;\n    }\n\n  }\n  checkMobile() {\n  //  // console.log(this.firstFormGroup)\n    if ((this.firstFormGroup.controls.candidateMobile.errors && this.firstFormGroup.controls.candidateMobile.errors.min) || this.firstFormGroup.controls.candidateMobile.errors && this.firstFormGroup.controls.candidateMobile.errors.max) {\n      return true\n    } else {\n      return false;\n    }\n  }\n\n  preventKeys(event) {\n    event.preventDefault();\n  }\n\n  editEducDetails(qual, i) {\n    this.educIndex = i;\n    this.qualEditData = qual;\n    this.qualEditBack = {\n      ...qual\n    };\n    this.isEdit = false\n    $('#qualEditModal').modal('show')\n  }\n  editCertDetails(cert, i) {\n    this.certIndex = i;\n    this.certEditData = cert;\n    this.certEditBack = {\n      ...cert\n    }\n    this.isEdit = false\n    $('#certEditModal').modal('show')\n    \n  }\n  editQualification() {\n    var editData = {\n      ...this.secondFormGroup.value\n    }\n    this.qualificationList.splice(this.educIndex, 1, editData);\n    this.qualEditBack = editData;\n    this.secondFormGroup.reset();\n    $('#qualEditModal').modal('hide')\n    // this.isCertf = false;\n    // this.qualEditData = qual;\n    // this.qualificationList.splice(i,1)\n  }\n\n  editCertification(cert, i) {\n    var editCert = {\n      ...this.certificateFormGroup.value\n    }\n    this.certificationList.splice(this.certIndex, 1, editCert)\n    this.certEditBack = editCert\n    this.certificateFormGroup.reset();\n    $('#certEditModal').modal('hide')\n    // this.isCertf = true;\n    // this.certEditData = cert;\n    // this.certificationList.splice(i,1)\n  }\n\n  saveQual() {\n    // if (this.secondFormGroup.valid) {\n    //   var secForm = this.qualificationList.find((item)=>{\n    //     return item == this.secondFormGroup.value;\n    //   });\n    //   if (secForm == undefined) {\n    this.QualSubmit = true;\n    if (this.secondFormGroup.valid) {\n      this.qualificationList.push(this.secondFormGroup.value)\n      this.secondFormGroup.reset();\n      this.isEdit = false;\n      if(this.qualificationList.length > 0){\n        this.isLinear = false;\n      }\n    }\n    //   }\n    // }\n  }\n\n  saveCert() {\n    this.CertSubmit = true;\n    if (this.certificateFormGroup.valid) {\n      this.certificationList.push(this.certificateFormGroup.value)\n      this.certificateFormGroup.reset();\n      this.isEdit = false;\n    }\n  }\n\n  deleteQual(qual, i) {\n    var del = confirm(\"Are You Sure You Want to Delete\")\n    if (del) {\n      this.qualificationList.splice(i, 1);\n      this.secondFormGroup.reset();\n    }\n    if(!this.qualificationList.length){\n      this.isLinear = true;\n    }\n\n  }\n\n  deleteCert(cert, i) {\n    var del = confirm(\"Are You Sure You Want to Delete\")\n    if (del) {\n      this.certificationList.splice(i, 1);\n      this.certificateFormGroup.reset();\n    }\n  }\n\n  deleteExp(exp, i) {\n    var del = confirm(\"Are You Sure You Want to Delete\")\n    if (del) {\n      this.experienceList.splice(i, 1);\n      this.thirdFormGroup.reset();\n    }\n  }\n\n  closeSecondForm(){\n    this.isEdit = false;\n    this.secondFormGroup.reset();\n  }\n  closeThirdForm(){\n    this.expForm = false;\n    this.thirdFormGroup.reset();\n  }\n  closeCertForm(){\n    this.isEdit = false;\n    this.certificateFormGroup.reset();\n  }\n\n}\n","module.exports = \".flname_inline{\\n    width: 50%;\\n    float: left;\\n}\\n.login_section .form-control{\\n    height:42px;\\n}\\n.login_section{\\n    /* background-color: #47bd91;\\n    height: 100vh;\\n    overflow-y: hidden; */\\n    height:100vh;\\n    /* background-image: url('./../../../assets/images/office_building.jpg'); */\\n    /* background-color:#d63732; */\\n    background-color: #2ECC71;\\n    background-size: cover;\\n}\\n.login-gradient{\\n    /* background-image: linear-gradient(0.40turn,rgba(61, 112, 178, 0.89), rgba(65, 214, 195, 0.89),rgba(85, 150, 230, 0.89)); */\\n    height: 100vh;\\n}\\n.form_center{\\n    position: absolute;\\n    top: 50%;\\n    left: 50%;\\n    -webkit-transform: translate(-50%,-50%);\\n            transform: translate(-50%,-50%);\\n    background-color:#ffffff\\n}\\n.login_round_img{\\n    position: absolute;\\n    left: 50%;\\n    -webkit-transform: translatex(-50%);\\n            transform: translatex(-50%);\\n    background-color: #ffffff;\\n    top: -19%;\\n    border-radius: 50%;\\n    padding: 24px;\\n}\\n.boxShadow{\\n    box-shadow: 0 1px 5px #959595;\\n}\\n.login_round_img img{\\n    width:60px;\\n}\\n.form_center .btn-primary{\\n    background-color: #47bd91;\\n    border-color:#47bd91;\\n}\\n.coccon_title{\\n    position: absolute;\\n    color: #ffffff;\\n    top: 20px;\\n    left: 40px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvQ29tcG9uZW50cy9jYW5kaWRhdGUtd2Fsa2luLW90cC9jYW5kaWRhdGUtd2Fsa2luLW90cC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksVUFBVTtJQUNWLFdBQVc7QUFDZjtBQUNBO0lBQ0ksV0FBVztBQUNmO0FBQ0E7SUFDSTs7eUJBRXFCO0lBQ3JCLFlBQVk7SUFDWiwyRUFBMkU7SUFDM0UsOEJBQThCO0lBQzlCLHlCQUF5QjtJQUN6QixzQkFBc0I7QUFDMUI7QUFDQTtJQUNJLDZIQUE2SDtJQUM3SCxhQUFhO0FBQ2pCO0FBQ0E7SUFDSSxrQkFBa0I7SUFDbEIsUUFBUTtJQUNSLFNBQVM7SUFDVCx1Q0FBK0I7WUFBL0IsK0JBQStCO0lBQy9CO0FBQ0o7QUFDQTtJQUNJLGtCQUFrQjtJQUNsQixTQUFTO0lBQ1QsbUNBQTJCO1lBQTNCLDJCQUEyQjtJQUMzQix5QkFBeUI7SUFDekIsU0FBUztJQUNULGtCQUFrQjtJQUNsQixhQUFhO0FBQ2pCO0FBQ0E7SUFDSSw2QkFBNkI7QUFDakM7QUFDQTtJQUNJLFVBQVU7QUFDZDtBQUNBO0lBQ0kseUJBQXlCO0lBQ3pCLG9CQUFvQjtBQUN4QjtBQUNBO0lBQ0ksa0JBQWtCO0lBQ2xCLGNBQWM7SUFDZCxTQUFTO0lBQ1QsVUFBVTtBQUNkIiwiZmlsZSI6InNyYy9hcHAvQ29tcG9uZW50cy9jYW5kaWRhdGUtd2Fsa2luLW90cC9jYW5kaWRhdGUtd2Fsa2luLW90cC5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmZsbmFtZV9pbmxpbmV7XG4gICAgd2lkdGg6IDUwJTtcbiAgICBmbG9hdDogbGVmdDtcbn1cbi5sb2dpbl9zZWN0aW9uIC5mb3JtLWNvbnRyb2x7XG4gICAgaGVpZ2h0OjQycHg7XG59XG4ubG9naW5fc2VjdGlvbntcbiAgICAvKiBiYWNrZ3JvdW5kLWNvbG9yOiAjNDdiZDkxO1xuICAgIGhlaWdodDogMTAwdmg7XG4gICAgb3ZlcmZsb3cteTogaGlkZGVuOyAqL1xuICAgIGhlaWdodDoxMDB2aDtcbiAgICAvKiBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJy4vLi4vLi4vLi4vYXNzZXRzL2ltYWdlcy9vZmZpY2VfYnVpbGRpbmcuanBnJyk7ICovXG4gICAgLyogYmFja2dyb3VuZC1jb2xvcjojZDYzNzMyOyAqL1xuICAgIGJhY2tncm91bmQtY29sb3I6ICMyRUNDNzE7XG4gICAgYmFja2dyb3VuZC1zaXplOiBjb3Zlcjtcbn1cbi5sb2dpbi1ncmFkaWVudHtcbiAgICAvKiBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQoMC40MHR1cm4scmdiYSg2MSwgMTEyLCAxNzgsIDAuODkpLCByZ2JhKDY1LCAyMTQsIDE5NSwgMC44OSkscmdiYSg4NSwgMTUwLCAyMzAsIDAuODkpKTsgKi9cbiAgICBoZWlnaHQ6IDEwMHZoO1xufVxuLmZvcm1fY2VudGVye1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDUwJTtcbiAgICBsZWZ0OiA1MCU7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwtNTAlKTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiNmZmZmZmZcbn1cbi5sb2dpbl9yb3VuZF9pbWd7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGxlZnQ6IDUwJTtcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZXgoLTUwJSk7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZmZmZjtcbiAgICB0b3A6IC0xOSU7XG4gICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICAgIHBhZGRpbmc6IDI0cHg7XG59XG4uYm94U2hhZG93e1xuICAgIGJveC1zaGFkb3c6IDAgMXB4IDVweCAjOTU5NTk1O1xufVxuLmxvZ2luX3JvdW5kX2ltZyBpbWd7XG4gICAgd2lkdGg6NjBweDtcbn1cbi5mb3JtX2NlbnRlciAuYnRuLXByaW1hcnl7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzQ3YmQ5MTtcbiAgICBib3JkZXItY29sb3I6IzQ3YmQ5MTtcbn1cbi5jb2Njb25fdGl0bGV7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGNvbG9yOiAjZmZmZmZmO1xuICAgIHRvcDogMjBweDtcbiAgICBsZWZ0OiA0MHB4O1xufSJdfQ== */\"","import { Component, OnInit } from '@angular/core';\nimport { Router,ActivatedRoute } from '@angular/router';\nimport { AllServicesService } from \"./../../Services/AllServices/all-services.service\"\nimport { BlockUI, NgBlockUI } from 'ng-block-ui';\n\n@Component({\n  selector: 'app-candidate-login',\n  templateUrl: './candidate-walkin-otp.component.html',\n  styleUrls: ['./candidate-walkin-otp.component.css']\n})\nexport class CandidateWalkinOtpComponent implements OnInit {\n\n  @BlockUI() blockUI: NgBlockUI;\n  public encryptedToken:any;\n  otp:any = null;\n  candidDetails:object;\n\n  constructor(private router:Router,private activeRoute: ActivatedRoute,private apiService : AllServicesService) { \n    this.activeRoute.params.subscribe(params=>{\n      this.encryptedToken = params['encryptedToken'];\n      // console.log(this.encryptedToken)\n    })\n\n  }\n\n  ngOnInit() {\n  }\n\n\n  getCandidateDetails(){\n    this.blockUI.start('Please Wait We are Verifying...');\n    var data = {\n      // encryptedToken : this.encryptedToken,\n      // uniqueCode : this.otp         \n    }\n    this.apiService.postData('testmanagement/testconfig/candidatewalkinverification/?encryptedToken='+encodeURIComponent(this.encryptedToken)+'&uniqueCode='+this.otp,data)\n      .subscribe(res=>{\n        this.blockUI.stop();\n        if(res['statusCode']==\"1\" && res['examStatus'] == 'active'){\n          this.router.navigate(['/exam',res['testInstanceId']])\n          localStorage.setItem('encryptedToken',this.encryptedToken)\n        }else if(res['statusCode']==\"1\" && res['examStatus'] == 'inprogress'){\n            this.apiService.errorAlert(res['statusMessage'])\n        }if(res['statusCode']==\"0\"){\n          this.apiService.errorAlert(res['statusMessage']);\n        }\n        // if(res['testTypeId'] == '2'){\n        //   this.router.navigate(['/candidate/registration'])\n        //   localStorage.setItem('testTypeId',res['testTypeId']);\n        //   localStorage.setItem('encryptedToken',this.encryptedToken)\n        // }\n      },error=>{\n        this.blockUI.stop();\n      })\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { CandidateRegistrationComponent } from './../../Components/candidate-registration/candidate-registration.component';\nimport {  CandidateLoginComponent } from './../../Components/candidate-login/candidate-login.component'\nimport { CandidateWalkinOtpComponent } from './../../Components/candidate-walkin-otp/candidate-walkin-otp.component';\nimport {DatePipe} from '@angular/common';\nimport {ReactiveFormsModule,FormsModule} from '@angular/forms';\nimport {MatStepperModule} from '@angular/material/stepper';\nimport {MatButtonModule,MatFormFieldModule,MatInputModule,MatRippleModule} from '@angular/material';\nimport {MatDatepickerModule} from '@angular/material/datepicker';\nimport {MatNativeDateModule} from '@angular/material';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\n\nimport { BlockUIModule } from 'ng-block-ui';\n\nconst routes: Routes = [{\n  path:'registration/:encryptedToken',\n  component:CandidateRegistrationComponent\n},\n{\n  path:'login/:encryptedToken',\n  component:CandidateLoginComponent\n},\n{\n  path:'walkin/:encryptedToken',\n  component:CandidateWalkinOtpComponent\n}];\n\n@NgModule({\n  providers: [ DatePipe],\n  declarations:[CandidateRegistrationComponent,CandidateLoginComponent,CandidateWalkinOtpComponent],\n  imports: [RouterModule.forChild(routes),MatStepperModule,\n    MatButtonModule,MatFormFieldModule,MatInputModule,MatRippleModule,ReactiveFormsModule,\n    FormsModule,CommonModule,MatDatepickerModule,MatNativeDateModule,MatCheckboxModule,\n    BlockUIModule.forRoot()],\n  exports: [RouterModule]\n})\nexport class CandidateRegistraionRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CandidateRegistraionRoutingModule } from './candidate-registraion-routing.module';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    CandidateRegistraionRoutingModule\n  ]\n})\nexport class CandidateRegistraionModule { }\n"],"sourceRoot":""}